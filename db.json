{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/external-fonts.css","path":"css/external-fonts.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1476627238000},{"_id":"source/favicon.ico","hash":"d8d88b9f14448f80ade655cf3465d65b37c2d83c","modified":1450585862000},{"_id":"themes/next/.bowerrc","hash":"6979fdfc723f9892bcd8b79e6aaed5d6642ae39d","modified":1479293948000},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1479293948000},{"_id":"themes/next/.javascript_ignore","hash":"8462d523e7ac6d9745490e8fe818ff92167a7cfe","modified":1479293950000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1476627238000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1476627238000},{"_id":"themes/next/_config.yml","hash":"b5d2a1dd6a765227767f5d0b7feb76ed6924b0c4","modified":1479302800000},{"_id":"themes/next/gulpfile.coffee","hash":"d21430c020ad4b2ae195d8750c3865897e605d33","modified":1476627238000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1476627238000},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1476627238000},{"_id":"themes/next/bower.json","hash":"fee150da6ba9a26b6f80a029d54422d8cb82c5a7","modified":1479293954000},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1476627238000},{"_id":"source/_posts/ajax文件上传功能简述.md","hash":"5f972f49d30c7e2c553f34dbb1c51b5efded0554","modified":1479208176000},{"_id":"source/_posts/HandleEvent与addEventListener暧昧关系.md","hash":"196c26b6dd9af694578ff426f4c70cda10dd4f55","modified":1479634914000},{"_id":"source/_posts/css3前缀探测.md","hash":"30ee043f6d5593765ac591bd9ea9e16c8103ba14","modified":1480505782000},{"_id":"source/_posts/css样式操作之document-styleSheets.md","hash":"28910af702dbb4880669b2add2147b6dbae64f71","modified":1477870098000},{"_id":"source/_posts/h5本地图片预览简述.md","hash":"113188fe378bb8969b1e28d9c5986478a9383dab","modified":1479207860000},{"_id":"source/_posts/throttle与debounce简述.md","hash":"ca56090adc527292aed83f0e08f2dab991241c38","modified":1480505758000},{"_id":"source/_posts/起航.md","hash":"0ce588d68ffafc298e02b77ba827aeaf49d5c687","modified":1476795858000},{"_id":"source/_posts/移动端网页调试之chrome-remote.md","hash":"179525fe58baf3194cdb64f46d8753ff85020eb8","modified":1479988784000},{"_id":"source/_posts/跨域之JSONP那些事.md","hash":"5a46fa944d9a94bd2210ecbaedd83ee2f380f34f","modified":1476967982000},{"_id":"source/categories/index.md","hash":"ba23f1094b6f3eec7f5e283ce994cc9be46ec12b","modified":1475586706000},{"_id":"source/tags/index.md","hash":"e3ee3b6849c94ad125339d4a451ac5da4371f07c","modified":1475586390000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"182370b4007fc1b39424f53112be962bf0d9d5a6","modified":1479298204000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1476627238000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1476626314000},{"_id":"themes/next/.git/config","hash":"2e8d4ea34f7ac5fbf3a7e3cb6d3bd3691e2e3009","modified":1476627238000},{"_id":"themes/next/.git/index","hash":"f2c379fbf1ddcc5f002bb39ea832479218d6e527","modified":1479298204000},{"_id":"themes/next/.git/packed-refs","hash":"f64c35664670f330207a63b8ddd21684397c9f3c","modified":1476627238000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1476627238000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1476627238000},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1476627238000},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1476627238000},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1476627238000},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1476627238000},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1476627238000},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1476627238000},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1476627238000},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1476627238000},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1476627238000},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1476627238000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1476627238000},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1476627238000},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1476627238000},{"_id":"themes/next/layout/_layout.swig","hash":"e11e494d55905e11af2db42944fb160733f308e6","modified":1476627238000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1476627238000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1476627238000},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1476627238000},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1476627238000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1476627238000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1476627238000},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1476627238000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1476627238000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1476627238000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1476627238000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"source/_posts/css样式操作之document-styleSheets/2.png","hash":"cd2755e3b20e1750919f7f5f97462bc647d1dda5","modified":1477836328000},{"_id":"source/_posts/css样式操作之document-styleSheets/1.png","hash":"a4ddd76390bc24ca03873873cf888486c3bf448b","modified":1477836326000},{"_id":"source/_posts/h5本地图片预览简述/1.png","hash":"e753bc85533bd7235038f9cf3ee42d6f5c7871cb","modified":1479196986000},{"_id":"source/_posts/移动端网页调试之chrome-remote/3.png","hash":"fa2387c302f5d339c066d3e03a1af42dc2484868","modified":1479959388000},{"_id":"source/_posts/移动端网页调试之chrome-remote/2.png","hash":"e89de332bba78df7d4620d4a63b5bf007a7488b9","modified":1479959388000},{"_id":"source/_posts/移动端网页调试之chrome-remote/1.png","hash":"36e0e6c0b03b7c73f3e17d585d3366b730852479","modified":1479959388000},{"_id":"source/_posts/移动端网页调试之chrome-remote/4.png","hash":"55fd4de59a8ff3446998bc0dca55cfadc3717a45","modified":1479959388000},{"_id":"source/_posts/移动端网页调试之chrome-remote/5.png","hash":"833822df28e0e920e00dbbfbae166bddf55624b3","modified":1479959388000},{"_id":"source/_posts/跨域之JSONP那些事/jsonp_1.png","hash":"d0a009aa63ef1d67854fd22541d6b22f5af14324","modified":1476771198000},{"_id":"source/_posts/跨域之JSONP那些事/jsonp_2.png","hash":"fa7a938002ae717b97ff00e0f609e1ffa58f2de9","modified":1476773522000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1476626314000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1476626314000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1476626314000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1476626314000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1476626314000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1476626314000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1476626314000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1476626314000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1476626314000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1476626314000},{"_id":"themes/next/.git/logs/HEAD","hash":"5f848a54938bf3830760c24d02d72a2a089ac774","modified":1479298204000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1c0e1418aace8d309fde8d4b26dd4b08493f666f","modified":1476627238000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1476627238000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a2052d3f379c3c70fbde47c29175ef2c637716d6","modified":1476627238000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f7138e4986b485119db84564cdeacda80ede8ad5","modified":1476627238000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1476627238000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1476627238000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1476627238000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1476627238000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6448e1335922f255c846badff630b6d84a3aba21","modified":1476627238000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1476627238000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1476627238000},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1476627238000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1476627238000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1476627238000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1476627238000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1476627238000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1476627238000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1476627238000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1476627238000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1476627238000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1476627238000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1476627238000},{"_id":"themes/next/source/css/external-fonts.css","hash":"aebf720d4f01a928c0285941460a9790db9b488b","modified":1476705714000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1476627238000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1476627238000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1476627238000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1476627238000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1476627238000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1476627238000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476627238000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476627238000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476627238000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1476627238000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1476627238000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"eb5235fd1391227a0c64aecd12ba3d7644470415","modified":1476707174000},{"_id":"source/_posts/移动端网页调试之chrome-remote/7.png","hash":"91eb612df092be7aa792cfc396b9a57eb13f6c0f","modified":1479959388000},{"_id":"source/_posts/移动端网页调试之chrome-remote/6.png","hash":"9f7b35b2a5e710ffb3f33cc0f2340d1575c362dd","modified":1479959388000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476627238000},{"_id":"themes/next/.git/objects/03/8f29a82568fe9fa739994de896d74eda59c56d","hash":"0e41a82eb8d3a682ddcb486a61ab45b471fa744d","modified":1479297982000},{"_id":"themes/next/.git/objects/1c/0913ec83aae9b8417ebe8a1af510df5f893b35","hash":"da07c699e26a6fe0df049cdb83f0475f9edefacc","modified":1476715788000},{"_id":"themes/next/.git/objects/07/385390a700c610754c83a3d2d516d8f4918550","hash":"9545814595f3a76dab7e6b994b0865836de1672b","modified":1476715788000},{"_id":"themes/next/.git/objects/0a/2cfab27bfad757faf6531dd6e0222474ee8e08","hash":"303bd029fa82d703271992779985dd665b6fb99f","modified":1479298204000},{"_id":"themes/next/.git/objects/1c/35b2e7418147572a310bbce8ae63230c889c24","hash":"7d80a4c67833ab95fb78561ce9a38044938de4f6","modified":1479298204000},{"_id":"themes/next/.git/objects/2f/9efe007ec9fb74e7f5528460b670d5f811c558","hash":"8d8b82ebf805c8ea6a85e53a853492848e347d23","modified":1479298204000},{"_id":"themes/next/.git/objects/44/a45c91d1811079198d4a86aaf783177702e327","hash":"42c482ea801fd9e5d597960e486b54d6a914c032","modified":1476715788000},{"_id":"themes/next/.git/objects/3e/b56ab29bd2faa676e88568dd28594b87d81f3e","hash":"4608f1dd96af76b7dff6e8fcd83979a4d5ce340a","modified":1479298204000},{"_id":"themes/next/.git/objects/5b/20887d579a6d1a6aba4f77f59c14e4aaa0df49","hash":"4a6be5d7a913691c129bb4cb64eefa3dfcf9f62f","modified":1479298204000},{"_id":"themes/next/.git/objects/46/cc0dcffa0d9e1e7382dfb6f23ff30af8357563","hash":"afb39949ad75672d3cd350009d81aff2ccff26c2","modified":1476715788000},{"_id":"themes/next/.git/objects/5f/6392995effb3caa3f0fec042a22b26886ad576","hash":"976751cac0609614d03d6f0742cc8e85c9646bd2","modified":1479297982000},{"_id":"themes/next/.git/objects/61/6a0074770629d43095a6a8b59ab23ce4d92669","hash":"9b6a9fe895a5765a2dff795434a067c362a385ee","modified":1479297982000},{"_id":"themes/next/.git/objects/68/88a4e74d3021ce05dc5ad0f6958e45e67e4507","hash":"cb0fe70ec403b3e41119db7210c8d27618065830","modified":1479297984000},{"_id":"themes/next/.git/objects/82/2272c58c1c2702a9eca216f43f76da05c589f1","hash":"ea93eadc2606cd760ae9f7351e5fd8475bb57a92","modified":1479298204000},{"_id":"themes/next/.git/objects/84/1924a3060207746a5d5a3d14f4c497a78a3a39","hash":"159d79d0bf841abbeb0dfd7506af3bf0551fbe45","modified":1476715788000},{"_id":"themes/next/.git/objects/74/0f83b4eb3588a8bf65a92dd524b81d87a339a3","hash":"9e19e467e9fb77637dc1cf6027318e01c963c87c","modified":1476715788000},{"_id":"themes/next/.git/objects/76/1c1405a6bb964388910075355f5f30b7963059","hash":"77394d95b7c5a232a855e96c77340bfc1692aceb","modified":1476715788000},{"_id":"themes/next/.git/objects/84/3f161f86da869a20dd6678c6240dbb4f7f3314","hash":"4affaed0b1739978671d3c6c43a63576e1d17aad","modified":1479297984000},{"_id":"themes/next/.git/objects/97/4f57f8f3309eb3430ac196d949773af253557e","hash":"22a0d5ad1e4472d910edc0185dad41724fd76049","modified":1479297984000},{"_id":"themes/next/.git/objects/aa/85c98bb0001a43542311295f150ccc4e3427cd","hash":"69f97da2e84cb1f2e2720436f5be3a226153f34c","modified":1476715788000},{"_id":"themes/next/.git/objects/7c/5d0825948fd1112fd9cc96a9ad013c5ca19e37","hash":"fddd3bc870b50662456119dba6bd5c42588c597c","modified":1479297984000},{"_id":"themes/next/.git/objects/99/2588bf21e99ebafdb7b7817235d17853a09a23","hash":"eb0a451e14add8fcd7e9e15f175e5c5d51811cd0","modified":1479297984000},{"_id":"themes/next/.git/objects/ba/110e03dc86ee2488182f771fe4520be9b18a3b","hash":"2eac8ae67e90166ee03a9b0246b69bb59c16f05a","modified":1476715788000},{"_id":"themes/next/.git/objects/b5/48bd1ac9bda60bd14095d5a3a50947ee545fd1","hash":"9fde908d7e4f433270f12a6cef9e491ddbfef863","modified":1479297984000},{"_id":"themes/next/.git/objects/b5/f8e86a4359162bf0405a33d4e65b3685edf98a","hash":"8c10e4e5ae7452f3328cbec9f193b285c0a5362a","modified":1476715788000},{"_id":"themes/next/.git/objects/af/15ce428beee54129b943b4d8a2e8bf0e926fd3","hash":"cd791438a033f59580a12c150e766a73c6920c92","modified":1476715788000},{"_id":"themes/next/.git/objects/e3/91116a687ac8b3bb26b47a683d8d4f637fcd3e","hash":"44b490128754e07035daa06afcaf58ade05e1672","modified":1479298204000},{"_id":"themes/next/.git/objects/e0/d5a267a045b55f77820ea07f25af7389df8dd8","hash":"aca0f98d28286082526ac21b8c9cdeb12ed6b8de","modified":1476715788000},{"_id":"themes/next/.git/objects/f4/c3c635c2939337f85757099d5b89a9856b6642","hash":"85f8410e15d9af6c8d115a3a04a9c00fa3e1a54a","modified":1479297982000},{"_id":"themes/next/.git/objects/c4/2328591c4b5037421536317d7a1c39229ffe7a","hash":"2377aa0541dc1b79fd38ffaea60f85f98f4f9198","modified":1479298204000},{"_id":"themes/next/.git/objects/f6/8a49542837ff856de8f00c997c33c16d325e75","hash":"49bd69a8394258f3d173e6312d22f7b7b3eff74c","modified":1479297982000},{"_id":"themes/next/.git/objects/f9/850aed527c4dbcaae88beb0ea29d87ab28863d","hash":"ea175a2f2d42bd0b116805d35b9183a863bb76df","modified":1479297982000},{"_id":"themes/next/.git/objects/fe/f4c67859cafe13142cb0e7ab5ccc833984d397","hash":"011800cc8983431830d9b0fc685560efd9323c02","modified":1479297984000},{"_id":"themes/next/.git/refs/heads/master","hash":"7324084b7acaf776b7feb29fda7a3f3c41dafb58","modified":1479298204000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"dc3612be5618ddfc5b4d9d179d035b8b4a9fbe52","modified":1476714084000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1476627238000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1476627238000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1476627238000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1476627238000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1476627238000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1476627238000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1476627238000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1476627238000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"c14b6f75f5b9ea2ca0069776a6b2f80b972123dc","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1476627238000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1476627238000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1476627238000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1476627238000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1476627238000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1476627238000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"7531a9746a800461d34f771f17604dc686fbefb6","modified":1476627238000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1476627238000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1476627238000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1476627238000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1476627238000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1476627238000},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1476627238000},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1476627238000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1476627238000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1476627238000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1476627238000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5f848a54938bf3830760c24d02d72a2a089ac774","modified":1479298204000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1476627238000},{"_id":"themes/next/.git/objects/pack/pack-97ee46b9384f164ad0dd909eff182c20c255016e.idx","hash":"6f2c21cc486496925aeb6caecf7e943049c5e208","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1476627238000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1476627238000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1476627238000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1476627238000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1476627238000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1476627238000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1476627238000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1476627238000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1476627238000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476627238000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1476627238000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476627238000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1476627238000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0285b9511f32a516026128ade23acb83b8b8c6d4","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"586d45f555fa32ed0f404d3da672f24966142cb1","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2f1dbf078100fdf47f7593a95664c19798b4a62c","modified":1476969942000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1476627238000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476627238000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1476627238000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476627238000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1476627238000},{"_id":"themes/next/.git/objects/pack/pack-97ee46b9384f164ad0dd909eff182c20c255016e.pack","hash":"3bf2ddb8c7b3175775f5d2ebf441fe1e32294fd6","modified":1479298204000},{"_id":"public/categories/index.html","hash":"da597d1b3727d62ebe6e57a253371aae606f15ef","modified":1481515038415},{"_id":"public/tags/index.html","hash":"ac5d1862ed0061ec8f840dc9a3b9ea39ebea566f","modified":1481515038415},{"_id":"public/2016/11/30/throttle与debounce简述/index.html","hash":"254f0ee17a0764c90fb10db5e3abbb632557541c","modified":1481515038415},{"_id":"public/2016/11/29/css3前缀探测/index.html","hash":"b1e5e27d15de7b312d99499390f15830326fffbe","modified":1481515038415},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/index.html","hash":"785ab3dc3bc3e993c6ea866c4527a3a673d0cfb1","modified":1481515038415},{"_id":"public/2016/11/20/HandleEvent与addEventListener暧昧关系/index.html","hash":"e6dd69047cce384af02f1b13a73a7c2fb53067ba","modified":1481515038415},{"_id":"public/2016/11/15/h5本地图片预览简述/index.html","hash":"2842b26d10d309c1dba757d8cc811ebcdeffbab6","modified":1481515038415},{"_id":"public/2016/11/14/ajax文件上传功能简述/index.html","hash":"60cf2bc8e2cc9aaba048584c7baba10595b7c248","modified":1481515038415},{"_id":"public/2016/10/30/css样式操作之document-styleSheets/index.html","hash":"19043ee72524ccb31bb65d3df1c124239e6e34e7","modified":1481515038415},{"_id":"public/2016/10/18/跨域之JSONP那些事/index.html","hash":"e71ee0866c9a163abd6bf96db6b7d52348ffb4a1","modified":1481515038415},{"_id":"public/2016/10/17/起航/index.html","hash":"2e8a31c449fb544f8715852856df8f5dae510e28","modified":1481515038415},{"_id":"public/archives/index.html","hash":"1d1ea0e50f303f34beab2ab20038e167b134075e","modified":1481515038416},{"_id":"public/archives/2016/index.html","hash":"0e2809dc21f459770fd6194f6d4fb88a8bed77c2","modified":1481515038416},{"_id":"public/archives/2016/10/index.html","hash":"ea23855eefa14f9f33d7fc595918182bdec5b10c","modified":1481515038416},{"_id":"public/archives/2016/11/index.html","hash":"2a2714d834bb5bb21d2e71e7c974803de7d28378","modified":1481515038416},{"_id":"public/categories/技术/index.html","hash":"03801d00356805f1c1efbc8192fa908d8c021cca","modified":1481515038416},{"_id":"public/categories/随笔/index.html","hash":"d39d2227d2262202177f2745072eeb12b408f783","modified":1481515038416},{"_id":"public/categories/工具/index.html","hash":"62c1d8372e2dc81984182d3fadbe023e8d5ad521","modified":1481515038416},{"_id":"public/index.html","hash":"a2b15c920a31765d802d876d13ade864da329170","modified":1481515038416},{"_id":"public/tags/javascript/index.html","hash":"c239ca50477bd9b0bedf785f5fe898733058e71e","modified":1481515038416},{"_id":"public/tags/生活/index.html","hash":"553258d4aa68d43a327cbef732912fadfb0591fe","modified":1481515038416},{"_id":"public/tags/tool/index.html","hash":"77421ef11a4b7bfe8a7cc984e7b1b58f3b70b69c","modified":1481515038416},{"_id":"public/favicon.ico","hash":"d8d88b9f14448f80ade655cf3465d65b37c2d83c","modified":1481515038467},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1481515038467},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1481515038468},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1481515038468},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1481515038468},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1481515038468},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1481515038468},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1481515038468},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1481515038468},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481515038468},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481515038468},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1481515038468},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1481515038468},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1481515038468},{"_id":"public/uploads/avatar.jpg","hash":"eb5235fd1391227a0c64aecd12ba3d7644470415","modified":1481515038468},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1481515038468},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1481515038469},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481515038469},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481515038469},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481515038469},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481515038470},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481515038470},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481515038470},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1481515038470},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1481515038470},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481515038470},{"_id":"public/2016/11/15/h5本地图片预览简述/1.png","hash":"e753bc85533bd7235038f9cf3ee42d6f5c7871cb","modified":1481515038470},{"_id":"public/2016/10/30/css样式操作之document-styleSheets/2.png","hash":"cd2755e3b20e1750919f7f5f97462bc647d1dda5","modified":1481515038470},{"_id":"public/2016/10/30/css样式操作之document-styleSheets/1.png","hash":"a4ddd76390bc24ca03873873cf888486c3bf448b","modified":1481515038470},{"_id":"public/2016/10/18/跨域之JSONP那些事/jsonp_1.png","hash":"d0a009aa63ef1d67854fd22541d6b22f5af14324","modified":1481515038470},{"_id":"public/2016/10/18/跨域之JSONP那些事/jsonp_2.png","hash":"fa7a938002ae717b97ff00e0f609e1ffa58f2de9","modified":1481515038470},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/1.png","hash":"36e0e6c0b03b7c73f3e17d585d3366b730852479","modified":1481515038470},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/2.png","hash":"e89de332bba78df7d4620d4a63b5bf007a7488b9","modified":1481515038470},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/3.png","hash":"fa2387c302f5d339c066d3e03a1af42dc2484868","modified":1481515038470},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/4.png","hash":"55fd4de59a8ff3446998bc0dca55cfadc3717a45","modified":1481515038470},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/5.png","hash":"833822df28e0e920e00dbbfbae166bddf55624b3","modified":1481515038470},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1481515039132},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1481515039138},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1481515039140},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/6.png","hash":"9f7b35b2a5e710ffb3f33cc0f2340d1575c362dd","modified":1481515039140},{"_id":"public/2016/11/24/移动端网页调试之chrome-remote/7.png","hash":"91eb612df092be7aa792cfc396b9a57eb13f6c0f","modified":1481515039140},{"_id":"public/css/external-fonts.css","hash":"aebf720d4f01a928c0285941460a9790db9b488b","modified":1481515039145},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1481515039145},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1481515039145},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1481515039145},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1481515039146},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1481515039146},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1481515039146},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1481515039146},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1481515039146},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1481515039146},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1481515039146},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1481515039146},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1481515039146},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1481515039146},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1481515039146},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1481515039146},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1481515039146},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1481515039146},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1481515039146},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1481515039146},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1481515039146},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1481515039146},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1481515039146},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1481515039146},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1481515039146},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1481515039146},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481515039146},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481515039146},{"_id":"public/css/main.css","hash":"af3091c36d7b1875528083b93bf077e9a71f9aef","modified":1481515039146},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1481515039146},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1481515039146},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1481515039146},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1481515039147},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1481515039147},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1481515039147},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1481515039147},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1481515039147},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1481515039147},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1481515039147},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1481515039151}],"Category":[{"name":"技术","_id":"ciwljsuw00004325vu8f1bla5"},{"name":"随笔","_id":"ciwljsuws000o325vwy5hixkz"},{"name":"工具","_id":"ciwljsuww000u325vg8soykqe"}],"Data":[],"Page":[{"title":"分类","date":"2016-10-04T13:10:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类 \ndate: 2016-10-04 21:10:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-04T13:11:46.000Z","path":"categories/index.html","layout":"page","_id":"ciwljsuvs0001325vbdb4l7vh","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-10-04T13:04:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签 \ndate: 2016-10-04 21:04:51\ntype: \"tags\"\n---\n","updated":"2016-10-04T13:06:30.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciwljsuvy0003325vkoksxvqe","content":"","excerpt":"","more":""}],"Post":[{"title":"ajax文件上传功能简述","date":"2016-11-14T10:57:34.000Z","_content":"> 回忆就好像缓存，不清一清，怎么能看到未来。\n\n**最**近几天一直在忙着搞个视频上传功能，本来想想比较简单，无非就是前端上传，服务端做处理，返回状态。可是偏偏要集成在百度的ueditor中，方便我们运营人员使用，于是问题就变得恶心了。最初当然是看相关的api文档，然后就按着流程走了一下，结果发现，之前维护编辑器的小伙伴貌似没按套路来，配置走了其他方式，然后我就想哭了。经过两天的苦战之后，摸到门路，终于把视频上传功能的套子给建设好了，然后就开开心心的搞功能了，接下来就谈谈上传所涉及的前端技术。\n**先**来简单扯扯以前的上传文件方式（flash插件之类的我就不提了，毕竟这种高级货对于前端来说会用就行了，别太执着怎么实现的）。<!--more-->基本大都是通过form表单来完成，但是页面会刷新，这种体验感给人感觉很不友好，然后就有人通过隐藏的iframe来完成表单提交，就实现了无刷新的上传功能，体验度得到了直线上升，但是通过iframe来完成无刷新上传始终给人感觉太过于繁琐，不太直观，毕竟我们习惯了用ajax与服务端来交互，一直想着能用ajax来完成表单的提交功能，但是在几年前（具体几年我真不知道，我入前端也就两年0.0），这个是没法实现的，因为老的ajax技术中XMLHttpRequest对象有一些缺陷：\n> * 只支持文本数据的传送，不支持二进制文件的上传。\n> * 不支持跨域\n\n然后在新版本中做了好多改进，其中两条那肯定是对上面那两个缺陷修复了，即支持了二进制文件的上传，支持了跨域，支持了进度更新，其他的就不说了，自行百度。\n既然支持了二进制文件上传，那我们的文件上传功能在现代浏览器中就可以使用熟悉的ajax配合h5的FormData对象来完成，FormData 可以模拟表单数据，以键值存储数据。然后那些年让人头痛的上传功能就可以简化为一下代码：\n\n    var data = new FormData(form/null);//可以是表单对象，或者为空，后边自己添加数据。\n    $.ajax({ \n\t    url: 'http://minisky.duapp.com/upload',//接口 \n\t    type: 'POST',  \n\t    data: data,   \n\t    processData: false,  //告诉jquery对象处理你要发送的数据\n\t    contentType: false, //告诉jquery不要去给别人乱加请求头类型\n\t    success:function(res){\n\t    \t//to do\n\t    },\n\t    xhr: function(){\n\t        var xhr = $.ajaxSettings.xhr();//得到xhr对象\n\t            if(xhr.upload) {\n\t                xhr.upload.addEventListener(\"progress\" , function(evt){\n\t                //evt.loaded,evt.total\n\t                },false);\n\t                return xhr;\n\t            }\n\t    },\n        error:function(){\n            //....\n        }\n    });\n\n上面基本算是一个完整的ajax文件上传代码。自己当时再做上传功能时临时做了个测试**[demo](http://minisky.duapp.com/skyexample/upload):**http://minisky.duapp.com/skyexample/upload 由于仅仅是测试，代码未做优化，比较丑。当然，如果不太喜欢jquery的可以用原生的ajax来完成，代码比较简单整洁，该demo代码中也有相应例子，不过不完整，也不多说，可以自由发挥。\n到这里，或许会发现，跨域了怎么办，上面代码并没有做跨域相关的解释。首先我们要知道，跨域受两方面限制，一方面来自浏览器，一方面来自服务端，既然我们都在用现代浏览器了，那么自然浏览器允许你跨域了，支持你跨域的这个需求，那么接下来就是服务端是否支持了，如果有一天你遇到出现跨域限制问题，就不要为难自己了，大胆的去跟服务端同学说下，你这边需要设置一下允许跨域的头，类似这样：\n\n    res.header(\"Access-Control-Allow-Origin\", \"*\");//*指的是允许任何网站跨域请求，你可以指定你所在一个或者几个域。\n    \n上面是nodejs设置方式，不过无论是哪种，基本都是大同小异。然后通过这两方面的支持，你就可以实现跨域上传，跨域请求等，不用在为跨域那么苦恼，demo中接口支持跨域的，你也可以在本地调用试试。\n噢，忘了说IE,IE10以下，建议还是用传统的表单方式吧，虽然没有测过，但是好像不行，如果遇到，请谨慎用此方法。以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流。","source":"_posts/ajax文件上传功能简述.md","raw":"---\ntitle: ajax文件上传功能简述\ndate: 2016-11-14 18:57:34\ntags: javascript\ncategories: 技术\n---\n> 回忆就好像缓存，不清一清，怎么能看到未来。\n\n**最**近几天一直在忙着搞个视频上传功能，本来想想比较简单，无非就是前端上传，服务端做处理，返回状态。可是偏偏要集成在百度的ueditor中，方便我们运营人员使用，于是问题就变得恶心了。最初当然是看相关的api文档，然后就按着流程走了一下，结果发现，之前维护编辑器的小伙伴貌似没按套路来，配置走了其他方式，然后我就想哭了。经过两天的苦战之后，摸到门路，终于把视频上传功能的套子给建设好了，然后就开开心心的搞功能了，接下来就谈谈上传所涉及的前端技术。\n**先**来简单扯扯以前的上传文件方式（flash插件之类的我就不提了，毕竟这种高级货对于前端来说会用就行了，别太执着怎么实现的）。<!--more-->基本大都是通过form表单来完成，但是页面会刷新，这种体验感给人感觉很不友好，然后就有人通过隐藏的iframe来完成表单提交，就实现了无刷新的上传功能，体验度得到了直线上升，但是通过iframe来完成无刷新上传始终给人感觉太过于繁琐，不太直观，毕竟我们习惯了用ajax与服务端来交互，一直想着能用ajax来完成表单的提交功能，但是在几年前（具体几年我真不知道，我入前端也就两年0.0），这个是没法实现的，因为老的ajax技术中XMLHttpRequest对象有一些缺陷：\n> * 只支持文本数据的传送，不支持二进制文件的上传。\n> * 不支持跨域\n\n然后在新版本中做了好多改进，其中两条那肯定是对上面那两个缺陷修复了，即支持了二进制文件的上传，支持了跨域，支持了进度更新，其他的就不说了，自行百度。\n既然支持了二进制文件上传，那我们的文件上传功能在现代浏览器中就可以使用熟悉的ajax配合h5的FormData对象来完成，FormData 可以模拟表单数据，以键值存储数据。然后那些年让人头痛的上传功能就可以简化为一下代码：\n\n    var data = new FormData(form/null);//可以是表单对象，或者为空，后边自己添加数据。\n    $.ajax({ \n\t    url: 'http://minisky.duapp.com/upload',//接口 \n\t    type: 'POST',  \n\t    data: data,   \n\t    processData: false,  //告诉jquery对象处理你要发送的数据\n\t    contentType: false, //告诉jquery不要去给别人乱加请求头类型\n\t    success:function(res){\n\t    \t//to do\n\t    },\n\t    xhr: function(){\n\t        var xhr = $.ajaxSettings.xhr();//得到xhr对象\n\t            if(xhr.upload) {\n\t                xhr.upload.addEventListener(\"progress\" , function(evt){\n\t                //evt.loaded,evt.total\n\t                },false);\n\t                return xhr;\n\t            }\n\t    },\n        error:function(){\n            //....\n        }\n    });\n\n上面基本算是一个完整的ajax文件上传代码。自己当时再做上传功能时临时做了个测试**[demo](http://minisky.duapp.com/skyexample/upload):**http://minisky.duapp.com/skyexample/upload 由于仅仅是测试，代码未做优化，比较丑。当然，如果不太喜欢jquery的可以用原生的ajax来完成，代码比较简单整洁，该demo代码中也有相应例子，不过不完整，也不多说，可以自由发挥。\n到这里，或许会发现，跨域了怎么办，上面代码并没有做跨域相关的解释。首先我们要知道，跨域受两方面限制，一方面来自浏览器，一方面来自服务端，既然我们都在用现代浏览器了，那么自然浏览器允许你跨域了，支持你跨域的这个需求，那么接下来就是服务端是否支持了，如果有一天你遇到出现跨域限制问题，就不要为难自己了，大胆的去跟服务端同学说下，你这边需要设置一下允许跨域的头，类似这样：\n\n    res.header(\"Access-Control-Allow-Origin\", \"*\");//*指的是允许任何网站跨域请求，你可以指定你所在一个或者几个域。\n    \n上面是nodejs设置方式，不过无论是哪种，基本都是大同小异。然后通过这两方面的支持，你就可以实现跨域上传，跨域请求等，不用在为跨域那么苦恼，demo中接口支持跨域的，你也可以在本地调用试试。\n噢，忘了说IE,IE10以下，建议还是用传统的表单方式吧，虽然没有测过，但是好像不行，如果遇到，请谨慎用此方法。以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流。","slug":"ajax文件上传功能简述","published":1,"updated":"2016-11-15T11:09:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuvk0000325vgf55ze8q","content":"<blockquote>\n<p>回忆就好像缓存，不清一清，怎么能看到未来。</p>\n</blockquote>\n<p><strong>最</strong>近几天一直在忙着搞个视频上传功能，本来想想比较简单，无非就是前端上传，服务端做处理，返回状态。可是偏偏要集成在百度的ueditor中，方便我们运营人员使用，于是问题就变得恶心了。最初当然是看相关的api文档，然后就按着流程走了一下，结果发现，之前维护编辑器的小伙伴貌似没按套路来，配置走了其他方式，然后我就想哭了。经过两天的苦战之后，摸到门路，终于把视频上传功能的套子给建设好了，然后就开开心心的搞功能了，接下来就谈谈上传所涉及的前端技术。<br><strong>先</strong>来简单扯扯以前的上传文件方式（flash插件之类的我就不提了，毕竟这种高级货对于前端来说会用就行了，别太执着怎么实现的）。<a id=\"more\"></a>基本大都是通过form表单来完成，但是页面会刷新，这种体验感给人感觉很不友好，然后就有人通过隐藏的iframe来完成表单提交，就实现了无刷新的上传功能，体验度得到了直线上升，但是通过iframe来完成无刷新上传始终给人感觉太过于繁琐，不太直观，毕竟我们习惯了用ajax与服务端来交互，一直想着能用ajax来完成表单的提交功能，但是在几年前（具体几年我真不知道，我入前端也就两年0.0），这个是没法实现的，因为老的ajax技术中XMLHttpRequest对象有一些缺陷：</p>\n<blockquote>\n<ul>\n<li>只支持文本数据的传送，不支持二进制文件的上传。</li>\n<li>不支持跨域</li>\n</ul>\n</blockquote>\n<p>然后在新版本中做了好多改进，其中两条那肯定是对上面那两个缺陷修复了，即支持了二进制文件的上传，支持了跨域，支持了进度更新，其他的就不说了，自行百度。<br>既然支持了二进制文件上传，那我们的文件上传功能在现代浏览器中就可以使用熟悉的ajax配合h5的FormData对象来完成，FormData 可以模拟表单数据，以键值存储数据。然后那些年让人头痛的上传功能就可以简化为一下代码：</p>\n<pre><code>var data = new FormData(form/null);//可以是表单对象，或者为空，后边自己添加数据。\n$.ajax({ \n    url: &apos;http://minisky.duapp.com/upload&apos;,//接口 \n    type: &apos;POST&apos;,  \n    data: data,   \n    processData: false,  //告诉jquery对象处理你要发送的数据\n    contentType: false, //告诉jquery不要去给别人乱加请求头类型\n    success:function(res){\n        //to do\n    },\n    xhr: function(){\n        var xhr = $.ajaxSettings.xhr();//得到xhr对象\n            if(xhr.upload) {\n                xhr.upload.addEventListener(&quot;progress&quot; , function(evt){\n                //evt.loaded,evt.total\n                },false);\n                return xhr;\n            }\n    },\n    error:function(){\n        //....\n    }\n});\n</code></pre><p>上面基本算是一个完整的ajax文件上传代码。自己当时再做上传功能时临时做了个测试<strong><a href=\"http://minisky.duapp.com/skyexample/upload\" target=\"_blank\" rel=\"external\">demo</a>:</strong><a href=\"http://minisky.duapp.com/skyexample/upload\" target=\"_blank\" rel=\"external\">http://minisky.duapp.com/skyexample/upload</a> 由于仅仅是测试，代码未做优化，比较丑。当然，如果不太喜欢jquery的可以用原生的ajax来完成，代码比较简单整洁，该demo代码中也有相应例子，不过不完整，也不多说，可以自由发挥。<br>到这里，或许会发现，跨域了怎么办，上面代码并没有做跨域相关的解释。首先我们要知道，跨域受两方面限制，一方面来自浏览器，一方面来自服务端，既然我们都在用现代浏览器了，那么自然浏览器允许你跨域了，支持你跨域的这个需求，那么接下来就是服务端是否支持了，如果有一天你遇到出现跨域限制问题，就不要为难自己了，大胆的去跟服务端同学说下，你这边需要设置一下允许跨域的头，类似这样：</p>\n<pre><code>res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);//*指的是允许任何网站跨域请求，你可以指定你所在一个或者几个域。\n</code></pre><p>上面是nodejs设置方式，不过无论是哪种，基本都是大同小异。然后通过这两方面的支持，你就可以实现跨域上传，跨域请求等，不用在为跨域那么苦恼，demo中接口支持跨域的，你也可以在本地调用试试。<br>噢，忘了说IE,IE10以下，建议还是用传统的表单方式吧，虽然没有测过，但是好像不行，如果遇到，请谨慎用此方法。以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流。</p>\n","excerpt":"<blockquote>\n<p>回忆就好像缓存，不清一清，怎么能看到未来。</p>\n</blockquote>\n<p><strong>最</strong>近几天一直在忙着搞个视频上传功能，本来想想比较简单，无非就是前端上传，服务端做处理，返回状态。可是偏偏要集成在百度的ueditor中，方便我们运营人员使用，于是问题就变得恶心了。最初当然是看相关的api文档，然后就按着流程走了一下，结果发现，之前维护编辑器的小伙伴貌似没按套路来，配置走了其他方式，然后我就想哭了。经过两天的苦战之后，摸到门路，终于把视频上传功能的套子给建设好了，然后就开开心心的搞功能了，接下来就谈谈上传所涉及的前端技术。<br><strong>先</strong>来简单扯扯以前的上传文件方式（flash插件之类的我就不提了，毕竟这种高级货对于前端来说会用就行了，别太执着怎么实现的）。","more":"基本大都是通过form表单来完成，但是页面会刷新，这种体验感给人感觉很不友好，然后就有人通过隐藏的iframe来完成表单提交，就实现了无刷新的上传功能，体验度得到了直线上升，但是通过iframe来完成无刷新上传始终给人感觉太过于繁琐，不太直观，毕竟我们习惯了用ajax与服务端来交互，一直想着能用ajax来完成表单的提交功能，但是在几年前（具体几年我真不知道，我入前端也就两年0.0），这个是没法实现的，因为老的ajax技术中XMLHttpRequest对象有一些缺陷：</p>\n<blockquote>\n<ul>\n<li>只支持文本数据的传送，不支持二进制文件的上传。</li>\n<li>不支持跨域</li>\n</ul>\n</blockquote>\n<p>然后在新版本中做了好多改进，其中两条那肯定是对上面那两个缺陷修复了，即支持了二进制文件的上传，支持了跨域，支持了进度更新，其他的就不说了，自行百度。<br>既然支持了二进制文件上传，那我们的文件上传功能在现代浏览器中就可以使用熟悉的ajax配合h5的FormData对象来完成，FormData 可以模拟表单数据，以键值存储数据。然后那些年让人头痛的上传功能就可以简化为一下代码：</p>\n<pre><code>var data = new FormData(form/null);//可以是表单对象，或者为空，后边自己添加数据。\n$.ajax({ \n    url: &apos;http://minisky.duapp.com/upload&apos;,//接口 \n    type: &apos;POST&apos;,  \n    data: data,   \n    processData: false,  //告诉jquery对象处理你要发送的数据\n    contentType: false, //告诉jquery不要去给别人乱加请求头类型\n    success:function(res){\n        //to do\n    },\n    xhr: function(){\n        var xhr = $.ajaxSettings.xhr();//得到xhr对象\n            if(xhr.upload) {\n                xhr.upload.addEventListener(&quot;progress&quot; , function(evt){\n                //evt.loaded,evt.total\n                },false);\n                return xhr;\n            }\n    },\n    error:function(){\n        //....\n    }\n});\n</code></pre><p>上面基本算是一个完整的ajax文件上传代码。自己当时再做上传功能时临时做了个测试<strong><a href=\"http://minisky.duapp.com/skyexample/upload\">demo</a>:</strong><a href=\"http://minisky.duapp.com/skyexample/upload\">http://minisky.duapp.com/skyexample/upload</a> 由于仅仅是测试，代码未做优化，比较丑。当然，如果不太喜欢jquery的可以用原生的ajax来完成，代码比较简单整洁，该demo代码中也有相应例子，不过不完整，也不多说，可以自由发挥。<br>到这里，或许会发现，跨域了怎么办，上面代码并没有做跨域相关的解释。首先我们要知道，跨域受两方面限制，一方面来自浏览器，一方面来自服务端，既然我们都在用现代浏览器了，那么自然浏览器允许你跨域了，支持你跨域的这个需求，那么接下来就是服务端是否支持了，如果有一天你遇到出现跨域限制问题，就不要为难自己了，大胆的去跟服务端同学说下，你这边需要设置一下允许跨域的头，类似这样：</p>\n<pre><code>res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);//*指的是允许任何网站跨域请求，你可以指定你所在一个或者几个域。\n</code></pre><p>上面是nodejs设置方式，不过无论是哪种，基本都是大同小异。然后通过这两方面的支持，你就可以实现跨域上传，跨域请求等，不用在为跨域那么苦恼，demo中接口支持跨域的，你也可以在本地调用试试。<br>噢，忘了说IE,IE10以下，建议还是用传统的表单方式吧，虽然没有测过，但是好像不行，如果遇到，请谨慎用此方法。以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流。</p>"},{"title":"HandleEvent与addEventListener暧昧关系","date":"2016-11-20T09:36:50.000Z","_content":"> 减肥就是一个自我虐待的过程。\n\n“每个胖子都是潜力股”，看到一美工同事的变化，这话我信了。所以，我也开始了减肥这条不归路。写这篇以及以后的很多篇文章的时候，我都可能处在肚子咕咕叫或者头晕无力的状态之下（至少目前是这样），所以时不时会发生断片，当然希望真不是晕倒了。好了，回归正题，今天在写个东西的时候，发现了以前在某处绑定事件时用到过得一个属性handleEvent，于是为了打发这无聊的下雨天，就稍微给这个属性做个简短记录。\n说起handleEvent，往往不得不提一下addEventListener，addEventListener 是dom上的一个事件绑定方法，我们熟悉的模式大概是这样\n\n    dom.addEventListener(type,fn,bool);\n    \n其中fn为一个回调函数，里面写的都是事件触发后需要执行的一些逻辑。但是在DOM2的标准中除了fn是一个函数外，也可以是个对象（object），但是这个object必须要有handleEvent方法，通过这样的方式，可以把任何对象注册为事件处理的逻辑。简单实现方式：\n<!--more-->\n    var o = {\n        ...   //该对象的其他方法\n        handleEvent:function(evt){\n            //to do;\n            //evt为事件对象\n        }\n        ....\n    };\n    dom.addEventListener(type,o,bool);\n    \n基本实现就是上面方式，上面方式使我们在处理某些复杂的操作时，可以更有条理的组织处理逻辑。之前我们如果要改变事件时，基本都需要先remove掉当前的绑定，然后在add新的绑定，但是有了这个方法之后，我们就不需要这么做了，只需要动态的改变handleEvent事件处理器，就可以做到：\n\n    o.handleEvent = o.handler2; \n    /\n    o.handleEvent = fun;\n\n看看确实省了不少工作，不用再去纠结我绑了哪个，需要remove掉哪个了，而且它跟aaddEventListener基本共生的，也就是能用addEventListener地方，你可以放心的使用它，不能用addEventListener，就不要挣扎了。不过，如果你在使用的时候，忽然发现，this不再指向dom的时候，那么恭喜你，你终于发现它的缺陷了，不过，这个时候你应该控制台输出下this,会看到this具体是哪个对象，机灵的人可能会很快发现上面我们传的是对象，handleEvent是对象的一个属性，那么它的this必然是指向object本身，所以，这个时候，就稍微注意下，具体怎么改进自己的代码，根据实际情况，想出一个完善的解决方案，我这里就不多说了，毕竟，方法是死的，人是活的。","source":"_posts/HandleEvent与addEventListener暧昧关系.md","raw":"---\ntitle: HandleEvent与addEventListener暧昧关系\ndate: 2016-11-20 17:36:50\ntags: javascript\ncategories: 技术\n---\n> 减肥就是一个自我虐待的过程。\n\n“每个胖子都是潜力股”，看到一美工同事的变化，这话我信了。所以，我也开始了减肥这条不归路。写这篇以及以后的很多篇文章的时候，我都可能处在肚子咕咕叫或者头晕无力的状态之下（至少目前是这样），所以时不时会发生断片，当然希望真不是晕倒了。好了，回归正题，今天在写个东西的时候，发现了以前在某处绑定事件时用到过得一个属性handleEvent，于是为了打发这无聊的下雨天，就稍微给这个属性做个简短记录。\n说起handleEvent，往往不得不提一下addEventListener，addEventListener 是dom上的一个事件绑定方法，我们熟悉的模式大概是这样\n\n    dom.addEventListener(type,fn,bool);\n    \n其中fn为一个回调函数，里面写的都是事件触发后需要执行的一些逻辑。但是在DOM2的标准中除了fn是一个函数外，也可以是个对象（object），但是这个object必须要有handleEvent方法，通过这样的方式，可以把任何对象注册为事件处理的逻辑。简单实现方式：\n<!--more-->\n    var o = {\n        ...   //该对象的其他方法\n        handleEvent:function(evt){\n            //to do;\n            //evt为事件对象\n        }\n        ....\n    };\n    dom.addEventListener(type,o,bool);\n    \n基本实现就是上面方式，上面方式使我们在处理某些复杂的操作时，可以更有条理的组织处理逻辑。之前我们如果要改变事件时，基本都需要先remove掉当前的绑定，然后在add新的绑定，但是有了这个方法之后，我们就不需要这么做了，只需要动态的改变handleEvent事件处理器，就可以做到：\n\n    o.handleEvent = o.handler2; \n    /\n    o.handleEvent = fun;\n\n看看确实省了不少工作，不用再去纠结我绑了哪个，需要remove掉哪个了，而且它跟aaddEventListener基本共生的，也就是能用addEventListener地方，你可以放心的使用它，不能用addEventListener，就不要挣扎了。不过，如果你在使用的时候，忽然发现，this不再指向dom的时候，那么恭喜你，你终于发现它的缺陷了，不过，这个时候你应该控制台输出下this,会看到this具体是哪个对象，机灵的人可能会很快发现上面我们传的是对象，handleEvent是对象的一个属性，那么它的this必然是指向object本身，所以，这个时候，就稍微注意下，具体怎么改进自己的代码，根据实际情况，想出一个完善的解决方案，我这里就不多说了，毕竟，方法是死的，人是活的。","slug":"HandleEvent与addEventListener暧昧关系","published":1,"updated":"2016-11-20T09:41:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuvw0002325vltur2fec","content":"<blockquote>\n<p>减肥就是一个自我虐待的过程。</p>\n</blockquote>\n<p>“每个胖子都是潜力股”，看到一美工同事的变化，这话我信了。所以，我也开始了减肥这条不归路。写这篇以及以后的很多篇文章的时候，我都可能处在肚子咕咕叫或者头晕无力的状态之下（至少目前是这样），所以时不时会发生断片，当然希望真不是晕倒了。好了，回归正题，今天在写个东西的时候，发现了以前在某处绑定事件时用到过得一个属性handleEvent，于是为了打发这无聊的下雨天，就稍微给这个属性做个简短记录。<br>说起handleEvent，往往不得不提一下addEventListener，addEventListener 是dom上的一个事件绑定方法，我们熟悉的模式大概是这样</p>\n<pre><code>dom.addEventListener(type,fn,bool);\n</code></pre><p>其中fn为一个回调函数，里面写的都是事件触发后需要执行的一些逻辑。但是在DOM2的标准中除了fn是一个函数外，也可以是个对象（object），但是这个object必须要有handleEvent方法，通过这样的方式，可以把任何对象注册为事件处理的逻辑。简单实现方式：<br><a id=\"more\"></a><br>    var o = {<br>        …   //该对象的其他方法<br>        handleEvent:function(evt){<br>            //to do;<br>            //evt为事件对象<br>        }<br>        ….<br>    };<br>    dom.addEventListener(type,o,bool);</p>\n<p>基本实现就是上面方式，上面方式使我们在处理某些复杂的操作时，可以更有条理的组织处理逻辑。之前我们如果要改变事件时，基本都需要先remove掉当前的绑定，然后在add新的绑定，但是有了这个方法之后，我们就不需要这么做了，只需要动态的改变handleEvent事件处理器，就可以做到：</p>\n<pre><code>o.handleEvent = o.handler2; \n/\no.handleEvent = fun;\n</code></pre><p>看看确实省了不少工作，不用再去纠结我绑了哪个，需要remove掉哪个了，而且它跟aaddEventListener基本共生的，也就是能用addEventListener地方，你可以放心的使用它，不能用addEventListener，就不要挣扎了。不过，如果你在使用的时候，忽然发现，this不再指向dom的时候，那么恭喜你，你终于发现它的缺陷了，不过，这个时候你应该控制台输出下this,会看到this具体是哪个对象，机灵的人可能会很快发现上面我们传的是对象，handleEvent是对象的一个属性，那么它的this必然是指向object本身，所以，这个时候，就稍微注意下，具体怎么改进自己的代码，根据实际情况，想出一个完善的解决方案，我这里就不多说了，毕竟，方法是死的，人是活的。</p>\n","excerpt":"<blockquote>\n<p>减肥就是一个自我虐待的过程。</p>\n</blockquote>\n<p>“每个胖子都是潜力股”，看到一美工同事的变化，这话我信了。所以，我也开始了减肥这条不归路。写这篇以及以后的很多篇文章的时候，我都可能处在肚子咕咕叫或者头晕无力的状态之下（至少目前是这样），所以时不时会发生断片，当然希望真不是晕倒了。好了，回归正题，今天在写个东西的时候，发现了以前在某处绑定事件时用到过得一个属性handleEvent，于是为了打发这无聊的下雨天，就稍微给这个属性做个简短记录。<br>说起handleEvent，往往不得不提一下addEventListener，addEventListener 是dom上的一个事件绑定方法，我们熟悉的模式大概是这样</p>\n<pre><code>dom.addEventListener(type,fn,bool);\n</code></pre><p>其中fn为一个回调函数，里面写的都是事件触发后需要执行的一些逻辑。但是在DOM2的标准中除了fn是一个函数外，也可以是个对象（object），但是这个object必须要有handleEvent方法，通过这样的方式，可以把任何对象注册为事件处理的逻辑。简单实现方式：<br>","more":"<br>    var o = {<br>        …   //该对象的其他方法<br>        handleEvent:function(evt){<br>            //to do;<br>            //evt为事件对象<br>        }<br>        ….<br>    };<br>    dom.addEventListener(type,o,bool);</p>\n<p>基本实现就是上面方式，上面方式使我们在处理某些复杂的操作时，可以更有条理的组织处理逻辑。之前我们如果要改变事件时，基本都需要先remove掉当前的绑定，然后在add新的绑定，但是有了这个方法之后，我们就不需要这么做了，只需要动态的改变handleEvent事件处理器，就可以做到：</p>\n<pre><code>o.handleEvent = o.handler2; \n/\no.handleEvent = fun;\n</code></pre><p>看看确实省了不少工作，不用再去纠结我绑了哪个，需要remove掉哪个了，而且它跟aaddEventListener基本共生的，也就是能用addEventListener地方，你可以放心的使用它，不能用addEventListener，就不要挣扎了。不过，如果你在使用的时候，忽然发现，this不再指向dom的时候，那么恭喜你，你终于发现它的缺陷了，不过，这个时候你应该控制台输出下this,会看到this具体是哪个对象，机灵的人可能会很快发现上面我们传的是对象，handleEvent是对象的一个属性，那么它的this必然是指向object本身，所以，这个时候，就稍微注意下，具体怎么改进自己的代码，根据实际情况，想出一个完善的解决方案，我这里就不多说了，毕竟，方法是死的，人是活的。</p>"},{"title":"css3前缀探测","date":"2016-11-29T11:32:11.000Z","_content":"> 有一种生无可恋叫牙痛。\n\n这些天，牙痛的我对人生都产生了怀疑，做什么事都感觉力不存心的，今天稍微感觉好了点，于是就整理了一下这段时间项目中感觉可以记录的一些东西。首先来说说关于css前缀的问题。\n在css3盛行的今天，每个人都会在自己的代码（css/js）中或多或少的加入一些css3样式，前者大部分都是混迹于移动端的，后者可能更多的主攻pc端的，但是无论什么，总会遇到关于css前缀的问题，有时候可能在css文件中涉及，有时候也可能在js文件中涉及。在css文件中（这里不提less，sass等一些预处理语言），我们为了解决不同厂子浏览器兼容问题，会写出类似这样的代码：\n\n    .example{\n        -webkit-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        -moz-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        -o-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    }\n    \n然后基本就解决了浏览器兼容问题。那么如果在js中涉及到样式问题呢？<!--more-->例如在写某个滑动或者特效的时候，我们还要这样一下子赋予元素这么多吗？答案当然是...可要可不要。原谅我说了这么一句废话，写这么多其实也可以，没啥毛病，但是身为一个有志青年，毕竟要做到代码与己方便，与人方便，一个样式就要写那么一坨代码，自己都看不下去。然后那些牛逼的大神就想出了各种简化方式，解决方案基本大同小异，都是检测当前浏览器支持那种前缀，从而只写对应前缀的样式，省了不少事。下面我们就来看看这些具体的实现方式。\n##方式一： 元素特性探测\n这种方式，就是通过给元素加入一些css3的高级属性，然后检测元素具体最终支持哪个，代码如下：\n\n    var prefix = function() {\n        var div = document.createElement('div');\n        var cssText = '-webkit-transition:all .1s; -moz-transition:all .1s; -o-transition:all .1s; -ms-transition:all .1s; transition:all .1s;';\n        div.style.cssText = cssText;\n        var style = div.style;\n        if (style.transition) {\n            return '';\n        }\n        if (style.webkitTransition) {\n            return 'webkit';\n        }\n        if (style.mozTransition) {\n            return 'moz';\n        }\n        if (style.oTransition) {\n            return 'O';\n        }\n        if (style.msTransition) {\n            return 'ms';\n        }\n    }();\n## 方式二： 元素默认样式匹配\n其实这个方法跟上面差不多，不过不用自己定义一些样式后，载检测，由于浏览器对于每个元素都有默认所有属性，所以完全可以匹配样式属性是否包含在元素样式对象中，有两种方式，分别如下：\n### 1. \n \n\n    var prefix = (function () {\n        var style = window.getComputedStyle(document.documentElement, ''),\n        pre = (Array.prototype.slice\n              .call(style)\n              .join('') \n              .match(/-(moz|webkit|ms)-/)\n              )[1]\n        return pre\n    })();\n### 2.\n  \tvar prefix = (function(){\n  \t    var style = document.createElement('div').style;\n  \t\tvar preNames = [ \"webkitT\", \"MozT\", \"msT\", \"OT\",\"t\"],\n  \t\t\ttransform,\n  \t\t\ti =preNames.length;\n\n  \t\twhile(i--){\n  \t\t\ttransform = preNames[i] + \"ransform\";\n  \t\t\tif (transform in style) return preNames[i].substr(0, preNames[i].length - 1);\n  \t\t}\n  \t})();\n\n以上几种方法根据自己编码习惯选择，不过小一中获取元素样式属性方法存在兼容性问题，之前文章中有做过介绍，就不再详述。","source":"_posts/css3前缀探测.md","raw":"---\ntitle: css3前缀探测\ndate: 2016-11-29 19:32:11\ntags: javascript\ncategories: 技术\n---\n> 有一种生无可恋叫牙痛。\n\n这些天，牙痛的我对人生都产生了怀疑，做什么事都感觉力不存心的，今天稍微感觉好了点，于是就整理了一下这段时间项目中感觉可以记录的一些东西。首先来说说关于css前缀的问题。\n在css3盛行的今天，每个人都会在自己的代码（css/js）中或多或少的加入一些css3样式，前者大部分都是混迹于移动端的，后者可能更多的主攻pc端的，但是无论什么，总会遇到关于css前缀的问题，有时候可能在css文件中涉及，有时候也可能在js文件中涉及。在css文件中（这里不提less，sass等一些预处理语言），我们为了解决不同厂子浏览器兼容问题，会写出类似这样的代码：\n\n    .example{\n        -webkit-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        -moz-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        -o-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    }\n    \n然后基本就解决了浏览器兼容问题。那么如果在js中涉及到样式问题呢？<!--more-->例如在写某个滑动或者特效的时候，我们还要这样一下子赋予元素这么多吗？答案当然是...可要可不要。原谅我说了这么一句废话，写这么多其实也可以，没啥毛病，但是身为一个有志青年，毕竟要做到代码与己方便，与人方便，一个样式就要写那么一坨代码，自己都看不下去。然后那些牛逼的大神就想出了各种简化方式，解决方案基本大同小异，都是检测当前浏览器支持那种前缀，从而只写对应前缀的样式，省了不少事。下面我们就来看看这些具体的实现方式。\n##方式一： 元素特性探测\n这种方式，就是通过给元素加入一些css3的高级属性，然后检测元素具体最终支持哪个，代码如下：\n\n    var prefix = function() {\n        var div = document.createElement('div');\n        var cssText = '-webkit-transition:all .1s; -moz-transition:all .1s; -o-transition:all .1s; -ms-transition:all .1s; transition:all .1s;';\n        div.style.cssText = cssText;\n        var style = div.style;\n        if (style.transition) {\n            return '';\n        }\n        if (style.webkitTransition) {\n            return 'webkit';\n        }\n        if (style.mozTransition) {\n            return 'moz';\n        }\n        if (style.oTransition) {\n            return 'O';\n        }\n        if (style.msTransition) {\n            return 'ms';\n        }\n    }();\n## 方式二： 元素默认样式匹配\n其实这个方法跟上面差不多，不过不用自己定义一些样式后，载检测，由于浏览器对于每个元素都有默认所有属性，所以完全可以匹配样式属性是否包含在元素样式对象中，有两种方式，分别如下：\n### 1. \n \n\n    var prefix = (function () {\n        var style = window.getComputedStyle(document.documentElement, ''),\n        pre = (Array.prototype.slice\n              .call(style)\n              .join('') \n              .match(/-(moz|webkit|ms)-/)\n              )[1]\n        return pre\n    })();\n### 2.\n  \tvar prefix = (function(){\n  \t    var style = document.createElement('div').style;\n  \t\tvar preNames = [ \"webkitT\", \"MozT\", \"msT\", \"OT\",\"t\"],\n  \t\t\ttransform,\n  \t\t\ti =preNames.length;\n\n  \t\twhile(i--){\n  \t\t\ttransform = preNames[i] + \"ransform\";\n  \t\t\tif (transform in style) return preNames[i].substr(0, preNames[i].length - 1);\n  \t\t}\n  \t})();\n\n以上几种方法根据自己编码习惯选择，不过小一中获取元素样式属性方法存在兼容性问题，之前文章中有做过介绍，就不再详述。","slug":"css3前缀探测","published":1,"updated":"2016-11-30T11:36:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuw60006325va0roqlds","content":"<blockquote>\n<p>有一种生无可恋叫牙痛。</p>\n</blockquote>\n<p>这些天，牙痛的我对人生都产生了怀疑，做什么事都感觉力不存心的，今天稍微感觉好了点，于是就整理了一下这段时间项目中感觉可以记录的一些东西。首先来说说关于css前缀的问题。<br>在css3盛行的今天，每个人都会在自己的代码（css/js）中或多或少的加入一些css3样式，前者大部分都是混迹于移动端的，后者可能更多的主攻pc端的，但是无论什么，总会遇到关于css前缀的问题，有时候可能在css文件中涉及，有时候也可能在js文件中涉及。在css文件中（这里不提less，sass等一些预处理语言），我们为了解决不同厂子浏览器兼容问题，会写出类似这样的代码：</p>\n<pre><code>.example{\n    -webkit-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    -moz-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    -o-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n}\n</code></pre><p>然后基本就解决了浏览器兼容问题。那么如果在js中涉及到样式问题呢？<a id=\"more\"></a>例如在写某个滑动或者特效的时候，我们还要这样一下子赋予元素这么多吗？答案当然是…可要可不要。原谅我说了这么一句废话，写这么多其实也可以，没啥毛病，但是身为一个有志青年，毕竟要做到代码与己方便，与人方便，一个样式就要写那么一坨代码，自己都看不下去。然后那些牛逼的大神就想出了各种简化方式，解决方案基本大同小异，都是检测当前浏览器支持那种前缀，从而只写对应前缀的样式，省了不少事。下面我们就来看看这些具体的实现方式。</p>\n<p>##方式一： 元素特性探测<br>这种方式，就是通过给元素加入一些css3的高级属性，然后检测元素具体最终支持哪个，代码如下：</p>\n<pre><code>var prefix = function() {\n    var div = document.createElement(&apos;div&apos;);\n    var cssText = &apos;-webkit-transition:all .1s; -moz-transition:all .1s; -o-transition:all .1s; -ms-transition:all .1s; transition:all .1s;&apos;;\n    div.style.cssText = cssText;\n    var style = div.style;\n    if (style.transition) {\n        return &apos;&apos;;\n    }\n    if (style.webkitTransition) {\n        return &apos;webkit&apos;;\n    }\n    if (style.mozTransition) {\n        return &apos;moz&apos;;\n    }\n    if (style.oTransition) {\n        return &apos;O&apos;;\n    }\n    if (style.msTransition) {\n        return &apos;ms&apos;;\n    }\n}();\n</code></pre><h2 id=\"方式二：-元素默认样式匹配\"><a href=\"#方式二：-元素默认样式匹配\" class=\"headerlink\" title=\"方式二： 元素默认样式匹配\"></a>方式二： 元素默认样式匹配</h2><p>其实这个方法跟上面差不多，不过不用自己定义一些样式后，载检测，由于浏览器对于每个元素都有默认所有属性，所以完全可以匹配样式属性是否包含在元素样式对象中，有两种方式，分别如下：</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><pre><code>var prefix = (function () {\n    var style = window.getComputedStyle(document.documentElement, &apos;&apos;),\n    pre = (Array.prototype.slice\n          .call(style)\n          .join(&apos;&apos;) \n          .match(/-(moz|webkit|ms)-/)\n          )[1]\n    return pre\n})();\n</code></pre><h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><pre><code>var prefix = (function(){\n    var style = document.createElement(&apos;div&apos;).style;\n    var preNames = [ &quot;webkitT&quot;, &quot;MozT&quot;, &quot;msT&quot;, &quot;OT&quot;,&quot;t&quot;],\n        transform,\n        i =preNames.length;\n\n    while(i--){\n        transform = preNames[i] + &quot;ransform&quot;;\n        if (transform in style) return preNames[i].substr(0, preNames[i].length - 1);\n    }\n})();\n</code></pre><p>以上几种方法根据自己编码习惯选择，不过小一中获取元素样式属性方法存在兼容性问题，之前文章中有做过介绍，就不再详述。</p>\n","excerpt":"<blockquote>\n<p>有一种生无可恋叫牙痛。</p>\n</blockquote>\n<p>这些天，牙痛的我对人生都产生了怀疑，做什么事都感觉力不存心的，今天稍微感觉好了点，于是就整理了一下这段时间项目中感觉可以记录的一些东西。首先来说说关于css前缀的问题。<br>在css3盛行的今天，每个人都会在自己的代码（css/js）中或多或少的加入一些css3样式，前者大部分都是混迹于移动端的，后者可能更多的主攻pc端的，但是无论什么，总会遇到关于css前缀的问题，有时候可能在css文件中涉及，有时候也可能在js文件中涉及。在css文件中（这里不提less，sass等一些预处理语言），我们为了解决不同厂子浏览器兼容问题，会写出类似这样的代码：</p>\n<pre><code>.example{\n    -webkit-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    -moz-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    -o-box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n    box-shadow: 2px 2px 8px rgba(0, 0, 0, .1);\n}\n</code></pre><p>然后基本就解决了浏览器兼容问题。那么如果在js中涉及到样式问题呢？","more":"例如在写某个滑动或者特效的时候，我们还要这样一下子赋予元素这么多吗？答案当然是…可要可不要。原谅我说了这么一句废话，写这么多其实也可以，没啥毛病，但是身为一个有志青年，毕竟要做到代码与己方便，与人方便，一个样式就要写那么一坨代码，自己都看不下去。然后那些牛逼的大神就想出了各种简化方式，解决方案基本大同小异，都是检测当前浏览器支持那种前缀，从而只写对应前缀的样式，省了不少事。下面我们就来看看这些具体的实现方式。</p>\n<p>##方式一： 元素特性探测<br>这种方式，就是通过给元素加入一些css3的高级属性，然后检测元素具体最终支持哪个，代码如下：</p>\n<pre><code>var prefix = function() {\n    var div = document.createElement(&apos;div&apos;);\n    var cssText = &apos;-webkit-transition:all .1s; -moz-transition:all .1s; -o-transition:all .1s; -ms-transition:all .1s; transition:all .1s;&apos;;\n    div.style.cssText = cssText;\n    var style = div.style;\n    if (style.transition) {\n        return &apos;&apos;;\n    }\n    if (style.webkitTransition) {\n        return &apos;webkit&apos;;\n    }\n    if (style.mozTransition) {\n        return &apos;moz&apos;;\n    }\n    if (style.oTransition) {\n        return &apos;O&apos;;\n    }\n    if (style.msTransition) {\n        return &apos;ms&apos;;\n    }\n}();\n</code></pre><h2 id=\"方式二：-元素默认样式匹配\"><a href=\"#方式二：-元素默认样式匹配\" class=\"headerlink\" title=\"方式二： 元素默认样式匹配\"></a>方式二： 元素默认样式匹配</h2><p>其实这个方法跟上面差不多，不过不用自己定义一些样式后，载检测，由于浏览器对于每个元素都有默认所有属性，所以完全可以匹配样式属性是否包含在元素样式对象中，有两种方式，分别如下：</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><pre><code>var prefix = (function () {\n    var style = window.getComputedStyle(document.documentElement, &apos;&apos;),\n    pre = (Array.prototype.slice\n          .call(style)\n          .join(&apos;&apos;) \n          .match(/-(moz|webkit|ms)-/)\n          )[1]\n    return pre\n})();\n</code></pre><h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><pre><code>var prefix = (function(){\n    var style = document.createElement(&apos;div&apos;).style;\n    var preNames = [ &quot;webkitT&quot;, &quot;MozT&quot;, &quot;msT&quot;, &quot;OT&quot;,&quot;t&quot;],\n        transform,\n        i =preNames.length;\n\n    while(i--){\n        transform = preNames[i] + &quot;ransform&quot;;\n        if (transform in style) return preNames[i].substr(0, preNames[i].length - 1);\n    }\n})();\n</code></pre><p>以上几种方法根据自己编码习惯选择，不过小一中获取元素样式属性方法存在兼容性问题，之前文章中有做过介绍，就不再详述。</p>"},{"title":"css样式操作之document.styleSheets","date":"2016-10-30T12:52:52.000Z","_content":"\n> 天凉好个秋\n\n**杭**州开始变天了，很不幸，被突如其来的寒风伤着了，一把鼻涕，一把泪。在床上躺了好久之后，觉得还是写篇文章压压惊。前些天，有个大学同学问我，说他在项目中遇到一问题，有个效果的样式一直改不过来，并且截图给我，如下图：\n![logo](1.png)\n**他**想把图中红色部分的样式去掉，严格来说就是禁用掉，于是他用Jquery提供的css方法，将图中两个样式设置为默认值，结果却没有用。代码也给我看了，确实直接$(selector).css(?,?),没啥问题，而且这个思路想想也对，可为什么不行呢？刚开始我也没反应过来，于是让他先跳过，给我点时间我给他找解决方案，然后我就乱七八糟的想了一通，忽然想到了一个问题。很明显，他上面是想要个圆角样式，由于用bootstrap引入了相应的class,导致被设置为了0，即没有圆角，那这样肯定不行啊，这个样式存在覆盖了原有带有圆角的样式，看来通过上面jquery的赋值是不行了，有的人可能说，那可以赋一个你想要的圆角值啊，是个好办法，确实能解决问题，但是身为一个程序员，怎么能固定写死呢，肯定要适应各种环境啊，万一值变了呢，难道还要跑回来再改代码，显然是不行的。\n\n**在**经过一番激烈的胡思乱想之后，<!--more-->我这样的小白只找到了两种我认为可行的方法：\n### 1. 修改原css文件\n可以在原bootstrap.css文件中，找到这个样式，直接注释掉好了，省时省力，也不用再做其他的。不过，这只适用于其他页面也需不要这个样式的情况，万一有的地方需要，你给注释掉，哼哼，等着被其他同事打死吧。所以还是不提倡这样做。\n### 2. 通过js来禁用掉目标样式\n**怎**么禁？这是首要的问题，于是我们的document.styleSheets就闪亮登场了，可能很多人都不太熟悉这个对象，毕竟jquery提供了便捷的操作方式，这种看名字就让人感觉丑的东西，不到万不得已，一般是不会去关心的。但是不管你熟不熟悉，它就在那里，始终是有他存在的理由。这是个什么呢，话不多说，就截个图意会下：\n![logo](2.png)\n它其实就是就是当前页面引入的样式文件列表，即一个数组对象。列表中每个对象都应一些属性和方法，看名字，就可以大概猜到它所对应的功能，所以真就不在对具体属性和方法做详细说明了，就直接切入正题，探讨如何解决上面问题的方法。不过，有点还是要提一下，现代浏览器（ie8及以下除外）和古董浏览器有的方法稍微有点差别，后边会提到。\n**看**着图中对应的方法和属性，可以看到有个disabled属性，默认值为false,你可以设为true试试，它会将当前样式表禁用，也就是说当前这个对象所包含的所有样式都将不会起作用，所以一般不要用。然后再稍微往下看下，有个addRule，deleteRule，即就是添加新class样式或者删除。那么很明显我们这里将用到deleteRule这个方法，就是将你不想要的或者说你想禁用的样式删除掉，这样，上面那个问题也解决了。即假设你所删除的样式**在当前页面，是第三个样式文件中的第2个样式**，则有：\n\n    document.styleSheets[2].deleteRule(1);\n\n然后此文over了，确实太简单了，说那么一大堆废话，就写了这么一行代码结束了，想想看确实不应该。于是问题就出现了，那么多样式我哪知道他是第几个啊，难不成代码拔下来数一下，显然，身为一个有理想的小白，肯定不能这么做，现在什么都讲究适应性，总的让我们这些拿来主义不用动脑子，直接拿来用吧。想想解决方案，不难，我们所能知道的是在文件中这个class的全称，即是你或者其他人写很规则选择器class。那么很明显，我们肯定想拿着这个名字去禁掉相关样式，其实想法很美好，实现也很简单，只需要再做个匹配就行了。先码一段代码再说：\n\n    var sheets = document.styleSheets，\n        isIE = document.addEventListener ? false : true;;\n    var selector = '你想匹配的class'；\n    for(var i=0;i<sheets.length;i++){\n\t\tvar rs = sheets[i][isIE ? 'rules' : 'cssRules'] || [];\n\t\tfor(var j=0;j<rs.length;j++){\n\t\t\tif(rs[j].selectorText.replace(/\\s*/ig,'') == selector.replace(/\\s*/ig,'')){\n\t\t\t\tsheets[i][isIE ? 'removeRule' : 'deleteRule'](j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n其中变量selector即就是你想禁用的class,由于ie低版本写法上有点差异，所以需要做个兼容处理，另外，由于浏览器对样式名称格式解析和你写的稍微有那么一两个空格的差距，所以需要将空格去掉对比下。到这里，基本就简要的介绍了下document.styleSheets，当然，我们有时会用到addRule，具体用法就不说了，铺一段我写的一个方法，体会下就可以了：\n\n    function styleSheets(){\n        var sheets = document.styleSheets, //获得页面中所有样式\n    \t    isIE = document.addEventListener ? false : true;\n\n    \tvar insertRule = function(classStr){\n    \t\tvar lastsheet = sheets[sheets.length -1];\n    \t\tlastsheet[isIE ? 'addRule' : 'insertRule'](classStr,lastsheet[isIE ? 'rules' : 'cssRules'].length);\n    \t} \n    \tvar deleteRule = function(selector){\n    \t\tvar targetInfo; //存储目标class信息\n\t\t  \tfor(var i=0;i<sheets.length;i++){\n\t    \tvar rs = sheets[i][isIE ? 'rules' : 'cssRules'] || [];//跨域引入的时候，取不到，会为空，所以默认为一个数组\n\t    \t\tfor(var j=0;j<rs.length;j++){\n\t\t\t      \tif(rs[j].selectorText.replace(/\\s*/ig,'') == selector.replace(/\\s*/ig,'')){//由于浏览器解析出的样式格式和自己书写的稍微有点差异，所以清除空格作比对\n\t\t\t        \ttargetInfo = {parentIndex:i,curIndex:j}\n\t\t\t        \tbreak;\n\t\t\t      \t}\n\t\t\t    }\n\t\t  \t}\n\t\t  \tconsole.log(targetInfo);\n\t\t  \tif(targetInfo){\n\t\t  \t\tsheets[targetInfo.parentIndex][isIE ? 'removeRule' : 'deleteRule'](targetInfo.curIndex);\n\t\t  \t}\n    \t}\n\n    \treturn {\n    \t\tinsertRule:insertRule,\n    \t\tdeleteRule:deleteRule\n    \t}\n    }\n可以将这段代码直接copy到你的项目中，直接执行下，如var styletool = styleSheets();然后使用styletool.deleteRule(selector)，然后你就可删除你想删除的样式，当然，能成功删除的，都是脸长得帅的，长得丑的，可能会发现，这方法压根没用，所以我不得不说下这些个方法的局限性：\n\n-  如果你当前页面的样是都是通过&lt;style&gt;&lt;/style&gt;这样引入的，那么执行结果就是我们所想的那样。\n-  如果，你的载入的外部css文件是和当前页面在一个域下面的，也就是**不跨域**的，那么它的执行结果也是入门所想。\n\n以上两种情况此方法都是适用的。下面就来说说有问题的情况：\n\n-  如果，如果你用的chrome浏览器,而且是只是随便写了静态页面测试，没有启动一个本地或者线上服务的情况下，你载入了一个随便写的css文件（线上文件除外），这样就不起作用了。不是方法不对，是因为浏览器不让你这么做，所以你需要起个本地服务或者在线上的一个服务。然后就成功了。当然，如果你是第一种情况，那么就不需要起服务了。\n-  如果，若果你引入了其他域下的css文件，而且此刻你很想很想去禁用掉它其中的样式，那么，这个方法是行不通的，因为通过js读不到跨域样式文件中的规则，这就需要你真的看看外部引入的class是否真的很有必要，如果不是很特别（其实都不特别），你就稍微改下当前的代码结构，不用它的了。\n\n上面的方法在google下亲测确实在规范之内是有用的，如果有什么问题，可以探讨下，或者对我刚开始抛出的问题有其他的解决方案，都可以探讨下，另外原测试代码在[http://minisky.duapp.com/demo/sem/download.html](http://minisky.duapp.com/demo/sem/download.html)，这个页面本来是我想写一篇关于touch事件的文章，从实际项目中做的一个移动推广页面中扒出来的一个简略版，一并拿来在上面测试。最好是在控制台调出移动版页面看。直接调用 styletool.deleteRule(selector)就可测试。","source":"_posts/css样式操作之document-styleSheets.md","raw":"---\ntitle: css样式操作之document.styleSheets\ndate: 2016-10-30 20:52:52\ntags: javascript\ncategories: 技术\n---\n\n> 天凉好个秋\n\n**杭**州开始变天了，很不幸，被突如其来的寒风伤着了，一把鼻涕，一把泪。在床上躺了好久之后，觉得还是写篇文章压压惊。前些天，有个大学同学问我，说他在项目中遇到一问题，有个效果的样式一直改不过来，并且截图给我，如下图：\n![logo](1.png)\n**他**想把图中红色部分的样式去掉，严格来说就是禁用掉，于是他用Jquery提供的css方法，将图中两个样式设置为默认值，结果却没有用。代码也给我看了，确实直接$(selector).css(?,?),没啥问题，而且这个思路想想也对，可为什么不行呢？刚开始我也没反应过来，于是让他先跳过，给我点时间我给他找解决方案，然后我就乱七八糟的想了一通，忽然想到了一个问题。很明显，他上面是想要个圆角样式，由于用bootstrap引入了相应的class,导致被设置为了0，即没有圆角，那这样肯定不行啊，这个样式存在覆盖了原有带有圆角的样式，看来通过上面jquery的赋值是不行了，有的人可能说，那可以赋一个你想要的圆角值啊，是个好办法，确实能解决问题，但是身为一个程序员，怎么能固定写死呢，肯定要适应各种环境啊，万一值变了呢，难道还要跑回来再改代码，显然是不行的。\n\n**在**经过一番激烈的胡思乱想之后，<!--more-->我这样的小白只找到了两种我认为可行的方法：\n### 1. 修改原css文件\n可以在原bootstrap.css文件中，找到这个样式，直接注释掉好了，省时省力，也不用再做其他的。不过，这只适用于其他页面也需不要这个样式的情况，万一有的地方需要，你给注释掉，哼哼，等着被其他同事打死吧。所以还是不提倡这样做。\n### 2. 通过js来禁用掉目标样式\n**怎**么禁？这是首要的问题，于是我们的document.styleSheets就闪亮登场了，可能很多人都不太熟悉这个对象，毕竟jquery提供了便捷的操作方式，这种看名字就让人感觉丑的东西，不到万不得已，一般是不会去关心的。但是不管你熟不熟悉，它就在那里，始终是有他存在的理由。这是个什么呢，话不多说，就截个图意会下：\n![logo](2.png)\n它其实就是就是当前页面引入的样式文件列表，即一个数组对象。列表中每个对象都应一些属性和方法，看名字，就可以大概猜到它所对应的功能，所以真就不在对具体属性和方法做详细说明了，就直接切入正题，探讨如何解决上面问题的方法。不过，有点还是要提一下，现代浏览器（ie8及以下除外）和古董浏览器有的方法稍微有点差别，后边会提到。\n**看**着图中对应的方法和属性，可以看到有个disabled属性，默认值为false,你可以设为true试试，它会将当前样式表禁用，也就是说当前这个对象所包含的所有样式都将不会起作用，所以一般不要用。然后再稍微往下看下，有个addRule，deleteRule，即就是添加新class样式或者删除。那么很明显我们这里将用到deleteRule这个方法，就是将你不想要的或者说你想禁用的样式删除掉，这样，上面那个问题也解决了。即假设你所删除的样式**在当前页面，是第三个样式文件中的第2个样式**，则有：\n\n    document.styleSheets[2].deleteRule(1);\n\n然后此文over了，确实太简单了，说那么一大堆废话，就写了这么一行代码结束了，想想看确实不应该。于是问题就出现了，那么多样式我哪知道他是第几个啊，难不成代码拔下来数一下，显然，身为一个有理想的小白，肯定不能这么做，现在什么都讲究适应性，总的让我们这些拿来主义不用动脑子，直接拿来用吧。想想解决方案，不难，我们所能知道的是在文件中这个class的全称，即是你或者其他人写很规则选择器class。那么很明显，我们肯定想拿着这个名字去禁掉相关样式，其实想法很美好，实现也很简单，只需要再做个匹配就行了。先码一段代码再说：\n\n    var sheets = document.styleSheets，\n        isIE = document.addEventListener ? false : true;;\n    var selector = '你想匹配的class'；\n    for(var i=0;i<sheets.length;i++){\n\t\tvar rs = sheets[i][isIE ? 'rules' : 'cssRules'] || [];\n\t\tfor(var j=0;j<rs.length;j++){\n\t\t\tif(rs[j].selectorText.replace(/\\s*/ig,'') == selector.replace(/\\s*/ig,'')){\n\t\t\t\tsheets[i][isIE ? 'removeRule' : 'deleteRule'](j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n其中变量selector即就是你想禁用的class,由于ie低版本写法上有点差异，所以需要做个兼容处理，另外，由于浏览器对样式名称格式解析和你写的稍微有那么一两个空格的差距，所以需要将空格去掉对比下。到这里，基本就简要的介绍了下document.styleSheets，当然，我们有时会用到addRule，具体用法就不说了，铺一段我写的一个方法，体会下就可以了：\n\n    function styleSheets(){\n        var sheets = document.styleSheets, //获得页面中所有样式\n    \t    isIE = document.addEventListener ? false : true;\n\n    \tvar insertRule = function(classStr){\n    \t\tvar lastsheet = sheets[sheets.length -1];\n    \t\tlastsheet[isIE ? 'addRule' : 'insertRule'](classStr,lastsheet[isIE ? 'rules' : 'cssRules'].length);\n    \t} \n    \tvar deleteRule = function(selector){\n    \t\tvar targetInfo; //存储目标class信息\n\t\t  \tfor(var i=0;i<sheets.length;i++){\n\t    \tvar rs = sheets[i][isIE ? 'rules' : 'cssRules'] || [];//跨域引入的时候，取不到，会为空，所以默认为一个数组\n\t    \t\tfor(var j=0;j<rs.length;j++){\n\t\t\t      \tif(rs[j].selectorText.replace(/\\s*/ig,'') == selector.replace(/\\s*/ig,'')){//由于浏览器解析出的样式格式和自己书写的稍微有点差异，所以清除空格作比对\n\t\t\t        \ttargetInfo = {parentIndex:i,curIndex:j}\n\t\t\t        \tbreak;\n\t\t\t      \t}\n\t\t\t    }\n\t\t  \t}\n\t\t  \tconsole.log(targetInfo);\n\t\t  \tif(targetInfo){\n\t\t  \t\tsheets[targetInfo.parentIndex][isIE ? 'removeRule' : 'deleteRule'](targetInfo.curIndex);\n\t\t  \t}\n    \t}\n\n    \treturn {\n    \t\tinsertRule:insertRule,\n    \t\tdeleteRule:deleteRule\n    \t}\n    }\n可以将这段代码直接copy到你的项目中，直接执行下，如var styletool = styleSheets();然后使用styletool.deleteRule(selector)，然后你就可删除你想删除的样式，当然，能成功删除的，都是脸长得帅的，长得丑的，可能会发现，这方法压根没用，所以我不得不说下这些个方法的局限性：\n\n-  如果你当前页面的样是都是通过&lt;style&gt;&lt;/style&gt;这样引入的，那么执行结果就是我们所想的那样。\n-  如果，你的载入的外部css文件是和当前页面在一个域下面的，也就是**不跨域**的，那么它的执行结果也是入门所想。\n\n以上两种情况此方法都是适用的。下面就来说说有问题的情况：\n\n-  如果，如果你用的chrome浏览器,而且是只是随便写了静态页面测试，没有启动一个本地或者线上服务的情况下，你载入了一个随便写的css文件（线上文件除外），这样就不起作用了。不是方法不对，是因为浏览器不让你这么做，所以你需要起个本地服务或者在线上的一个服务。然后就成功了。当然，如果你是第一种情况，那么就不需要起服务了。\n-  如果，若果你引入了其他域下的css文件，而且此刻你很想很想去禁用掉它其中的样式，那么，这个方法是行不通的，因为通过js读不到跨域样式文件中的规则，这就需要你真的看看外部引入的class是否真的很有必要，如果不是很特别（其实都不特别），你就稍微改下当前的代码结构，不用它的了。\n\n上面的方法在google下亲测确实在规范之内是有用的，如果有什么问题，可以探讨下，或者对我刚开始抛出的问题有其他的解决方案，都可以探讨下，另外原测试代码在[http://minisky.duapp.com/demo/sem/download.html](http://minisky.duapp.com/demo/sem/download.html)，这个页面本来是我想写一篇关于touch事件的文章，从实际项目中做的一个移动推广页面中扒出来的一个简略版，一并拿来在上面测试。最好是在控制台调出移动版页面看。直接调用 styletool.deleteRule(selector)就可测试。","slug":"css样式操作之document-styleSheets","published":1,"updated":"2016-10-30T23:28:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuw80007325vvfpdrdq4","content":"<blockquote>\n<p>天凉好个秋</p>\n</blockquote>\n<p><strong>杭</strong>州开始变天了，很不幸，被突如其来的寒风伤着了，一把鼻涕，一把泪。在床上躺了好久之后，觉得还是写篇文章压压惊。前些天，有个大学同学问我，说他在项目中遇到一问题，有个效果的样式一直改不过来，并且截图给我，如下图：<br><img src=\"1.png\" alt=\"logo\"><br><strong>他</strong>想把图中红色部分的样式去掉，严格来说就是禁用掉，于是他用Jquery提供的css方法，将图中两个样式设置为默认值，结果却没有用。代码也给我看了，确实直接$(selector).css(?,?),没啥问题，而且这个思路想想也对，可为什么不行呢？刚开始我也没反应过来，于是让他先跳过，给我点时间我给他找解决方案，然后我就乱七八糟的想了一通，忽然想到了一个问题。很明显，他上面是想要个圆角样式，由于用bootstrap引入了相应的class,导致被设置为了0，即没有圆角，那这样肯定不行啊，这个样式存在覆盖了原有带有圆角的样式，看来通过上面jquery的赋值是不行了，有的人可能说，那可以赋一个你想要的圆角值啊，是个好办法，确实能解决问题，但是身为一个程序员，怎么能固定写死呢，肯定要适应各种环境啊，万一值变了呢，难道还要跑回来再改代码，显然是不行的。</p>\n<p><strong>在</strong>经过一番激烈的胡思乱想之后，<a id=\"more\"></a>我这样的小白只找到了两种我认为可行的方法：</p>\n<h3 id=\"1-修改原css文件\"><a href=\"#1-修改原css文件\" class=\"headerlink\" title=\"1. 修改原css文件\"></a>1. 修改原css文件</h3><p>可以在原bootstrap.css文件中，找到这个样式，直接注释掉好了，省时省力，也不用再做其他的。不过，这只适用于其他页面也需不要这个样式的情况，万一有的地方需要，你给注释掉，哼哼，等着被其他同事打死吧。所以还是不提倡这样做。</p>\n<h3 id=\"2-通过js来禁用掉目标样式\"><a href=\"#2-通过js来禁用掉目标样式\" class=\"headerlink\" title=\"2. 通过js来禁用掉目标样式\"></a>2. 通过js来禁用掉目标样式</h3><p><strong>怎</strong>么禁？这是首要的问题，于是我们的document.styleSheets就闪亮登场了，可能很多人都不太熟悉这个对象，毕竟jquery提供了便捷的操作方式，这种看名字就让人感觉丑的东西，不到万不得已，一般是不会去关心的。但是不管你熟不熟悉，它就在那里，始终是有他存在的理由。这是个什么呢，话不多说，就截个图意会下：<br><img src=\"2.png\" alt=\"logo\"><br>它其实就是就是当前页面引入的样式文件列表，即一个数组对象。列表中每个对象都应一些属性和方法，看名字，就可以大概猜到它所对应的功能，所以真就不在对具体属性和方法做详细说明了，就直接切入正题，探讨如何解决上面问题的方法。不过，有点还是要提一下，现代浏览器（ie8及以下除外）和古董浏览器有的方法稍微有点差别，后边会提到。<br><strong>看</strong>着图中对应的方法和属性，可以看到有个disabled属性，默认值为false,你可以设为true试试，它会将当前样式表禁用，也就是说当前这个对象所包含的所有样式都将不会起作用，所以一般不要用。然后再稍微往下看下，有个addRule，deleteRule，即就是添加新class样式或者删除。那么很明显我们这里将用到deleteRule这个方法，就是将你不想要的或者说你想禁用的样式删除掉，这样，上面那个问题也解决了。即假设你所删除的样式<strong>在当前页面，是第三个样式文件中的第2个样式</strong>，则有：</p>\n<pre><code>document.styleSheets[2].deleteRule(1);\n</code></pre><p>然后此文over了，确实太简单了，说那么一大堆废话，就写了这么一行代码结束了，想想看确实不应该。于是问题就出现了，那么多样式我哪知道他是第几个啊，难不成代码拔下来数一下，显然，身为一个有理想的小白，肯定不能这么做，现在什么都讲究适应性，总的让我们这些拿来主义不用动脑子，直接拿来用吧。想想解决方案，不难，我们所能知道的是在文件中这个class的全称，即是你或者其他人写很规则选择器class。那么很明显，我们肯定想拿着这个名字去禁掉相关样式，其实想法很美好，实现也很简单，只需要再做个匹配就行了。先码一段代码再说：</p>\n<pre><code>var sheets = document.styleSheets，\n    isIE = document.addEventListener ? false : true;;\nvar selector = &apos;你想匹配的class&apos;；\nfor(var i=0;i&lt;sheets.length;i++){\n    var rs = sheets[i][isIE ? &apos;rules&apos; : &apos;cssRules&apos;] || [];\n    for(var j=0;j&lt;rs.length;j++){\n        if(rs[j].selectorText.replace(/\\s*/ig,&apos;&apos;) == selector.replace(/\\s*/ig,&apos;&apos;)){\n            sheets[i][isIE ? &apos;removeRule&apos; : &apos;deleteRule&apos;](j);\n            break;\n        }\n    }\n}\n</code></pre><p>其中变量selector即就是你想禁用的class,由于ie低版本写法上有点差异，所以需要做个兼容处理，另外，由于浏览器对样式名称格式解析和你写的稍微有那么一两个空格的差距，所以需要将空格去掉对比下。到这里，基本就简要的介绍了下document.styleSheets，当然，我们有时会用到addRule，具体用法就不说了，铺一段我写的一个方法，体会下就可以了：</p>\n<pre><code>function styleSheets(){\n    var sheets = document.styleSheets, //获得页面中所有样式\n        isIE = document.addEventListener ? false : true;\n\n    var insertRule = function(classStr){\n        var lastsheet = sheets[sheets.length -1];\n        lastsheet[isIE ? &apos;addRule&apos; : &apos;insertRule&apos;](classStr,lastsheet[isIE ? &apos;rules&apos; : &apos;cssRules&apos;].length);\n    } \n    var deleteRule = function(selector){\n        var targetInfo; //存储目标class信息\n          for(var i=0;i&lt;sheets.length;i++){\n        var rs = sheets[i][isIE ? &apos;rules&apos; : &apos;cssRules&apos;] || [];//跨域引入的时候，取不到，会为空，所以默认为一个数组\n            for(var j=0;j&lt;rs.length;j++){\n                  if(rs[j].selectorText.replace(/\\s*/ig,&apos;&apos;) == selector.replace(/\\s*/ig,&apos;&apos;)){//由于浏览器解析出的样式格式和自己书写的稍微有点差异，所以清除空格作比对\n                    targetInfo = {parentIndex:i,curIndex:j}\n                    break;\n                  }\n            }\n          }\n          console.log(targetInfo);\n          if(targetInfo){\n              sheets[targetInfo.parentIndex][isIE ? &apos;removeRule&apos; : &apos;deleteRule&apos;](targetInfo.curIndex);\n          }\n    }\n\n    return {\n        insertRule:insertRule,\n        deleteRule:deleteRule\n    }\n}\n</code></pre><p>可以将这段代码直接copy到你的项目中，直接执行下，如var styletool = styleSheets();然后使用styletool.deleteRule(selector)，然后你就可删除你想删除的样式，当然，能成功删除的，都是脸长得帅的，长得丑的，可能会发现，这方法压根没用，所以我不得不说下这些个方法的局限性：</p>\n<ul>\n<li>如果你当前页面的样是都是通过&lt;style&gt;&lt;/style&gt;这样引入的，那么执行结果就是我们所想的那样。</li>\n<li>如果，你的载入的外部css文件是和当前页面在一个域下面的，也就是<strong>不跨域</strong>的，那么它的执行结果也是入门所想。</li>\n</ul>\n<p>以上两种情况此方法都是适用的。下面就来说说有问题的情况：</p>\n<ul>\n<li>如果，如果你用的chrome浏览器,而且是只是随便写了静态页面测试，没有启动一个本地或者线上服务的情况下，你载入了一个随便写的css文件（线上文件除外），这样就不起作用了。不是方法不对，是因为浏览器不让你这么做，所以你需要起个本地服务或者在线上的一个服务。然后就成功了。当然，如果你是第一种情况，那么就不需要起服务了。</li>\n<li>如果，若果你引入了其他域下的css文件，而且此刻你很想很想去禁用掉它其中的样式，那么，这个方法是行不通的，因为通过js读不到跨域样式文件中的规则，这就需要你真的看看外部引入的class是否真的很有必要，如果不是很特别（其实都不特别），你就稍微改下当前的代码结构，不用它的了。</li>\n</ul>\n<p>上面的方法在google下亲测确实在规范之内是有用的，如果有什么问题，可以探讨下，或者对我刚开始抛出的问题有其他的解决方案，都可以探讨下，另外原测试代码在<a href=\"http://minisky.duapp.com/demo/sem/download.html\" target=\"_blank\" rel=\"external\">http://minisky.duapp.com/demo/sem/download.html</a>，这个页面本来是我想写一篇关于touch事件的文章，从实际项目中做的一个移动推广页面中扒出来的一个简略版，一并拿来在上面测试。最好是在控制台调出移动版页面看。直接调用 styletool.deleteRule(selector)就可测试。</p>\n","excerpt":"<blockquote>\n<p>天凉好个秋</p>\n</blockquote>\n<p><strong>杭</strong>州开始变天了，很不幸，被突如其来的寒风伤着了，一把鼻涕，一把泪。在床上躺了好久之后，觉得还是写篇文章压压惊。前些天，有个大学同学问我，说他在项目中遇到一问题，有个效果的样式一直改不过来，并且截图给我，如下图：<br><img src=\"1.png\" alt=\"logo\"><br><strong>他</strong>想把图中红色部分的样式去掉，严格来说就是禁用掉，于是他用Jquery提供的css方法，将图中两个样式设置为默认值，结果却没有用。代码也给我看了，确实直接$(selector).css(?,?),没啥问题，而且这个思路想想也对，可为什么不行呢？刚开始我也没反应过来，于是让他先跳过，给我点时间我给他找解决方案，然后我就乱七八糟的想了一通，忽然想到了一个问题。很明显，他上面是想要个圆角样式，由于用bootstrap引入了相应的class,导致被设置为了0，即没有圆角，那这样肯定不行啊，这个样式存在覆盖了原有带有圆角的样式，看来通过上面jquery的赋值是不行了，有的人可能说，那可以赋一个你想要的圆角值啊，是个好办法，确实能解决问题，但是身为一个程序员，怎么能固定写死呢，肯定要适应各种环境啊，万一值变了呢，难道还要跑回来再改代码，显然是不行的。</p>\n<p><strong>在</strong>经过一番激烈的胡思乱想之后，","more":"我这样的小白只找到了两种我认为可行的方法：</p>\n<h3 id=\"1-修改原css文件\"><a href=\"#1-修改原css文件\" class=\"headerlink\" title=\"1. 修改原css文件\"></a>1. 修改原css文件</h3><p>可以在原bootstrap.css文件中，找到这个样式，直接注释掉好了，省时省力，也不用再做其他的。不过，这只适用于其他页面也需不要这个样式的情况，万一有的地方需要，你给注释掉，哼哼，等着被其他同事打死吧。所以还是不提倡这样做。</p>\n<h3 id=\"2-通过js来禁用掉目标样式\"><a href=\"#2-通过js来禁用掉目标样式\" class=\"headerlink\" title=\"2. 通过js来禁用掉目标样式\"></a>2. 通过js来禁用掉目标样式</h3><p><strong>怎</strong>么禁？这是首要的问题，于是我们的document.styleSheets就闪亮登场了，可能很多人都不太熟悉这个对象，毕竟jquery提供了便捷的操作方式，这种看名字就让人感觉丑的东西，不到万不得已，一般是不会去关心的。但是不管你熟不熟悉，它就在那里，始终是有他存在的理由。这是个什么呢，话不多说，就截个图意会下：<br><img src=\"2.png\" alt=\"logo\"><br>它其实就是就是当前页面引入的样式文件列表，即一个数组对象。列表中每个对象都应一些属性和方法，看名字，就可以大概猜到它所对应的功能，所以真就不在对具体属性和方法做详细说明了，就直接切入正题，探讨如何解决上面问题的方法。不过，有点还是要提一下，现代浏览器（ie8及以下除外）和古董浏览器有的方法稍微有点差别，后边会提到。<br><strong>看</strong>着图中对应的方法和属性，可以看到有个disabled属性，默认值为false,你可以设为true试试，它会将当前样式表禁用，也就是说当前这个对象所包含的所有样式都将不会起作用，所以一般不要用。然后再稍微往下看下，有个addRule，deleteRule，即就是添加新class样式或者删除。那么很明显我们这里将用到deleteRule这个方法，就是将你不想要的或者说你想禁用的样式删除掉，这样，上面那个问题也解决了。即假设你所删除的样式<strong>在当前页面，是第三个样式文件中的第2个样式</strong>，则有：</p>\n<pre><code>document.styleSheets[2].deleteRule(1);\n</code></pre><p>然后此文over了，确实太简单了，说那么一大堆废话，就写了这么一行代码结束了，想想看确实不应该。于是问题就出现了，那么多样式我哪知道他是第几个啊，难不成代码拔下来数一下，显然，身为一个有理想的小白，肯定不能这么做，现在什么都讲究适应性，总的让我们这些拿来主义不用动脑子，直接拿来用吧。想想解决方案，不难，我们所能知道的是在文件中这个class的全称，即是你或者其他人写很规则选择器class。那么很明显，我们肯定想拿着这个名字去禁掉相关样式，其实想法很美好，实现也很简单，只需要再做个匹配就行了。先码一段代码再说：</p>\n<pre><code>var sheets = document.styleSheets，\n    isIE = document.addEventListener ? false : true;;\nvar selector = &apos;你想匹配的class&apos;；\nfor(var i=0;i&lt;sheets.length;i++){\n    var rs = sheets[i][isIE ? &apos;rules&apos; : &apos;cssRules&apos;] || [];\n    for(var j=0;j&lt;rs.length;j++){\n        if(rs[j].selectorText.replace(/\\s*/ig,&apos;&apos;) == selector.replace(/\\s*/ig,&apos;&apos;)){\n            sheets[i][isIE ? &apos;removeRule&apos; : &apos;deleteRule&apos;](j);\n            break;\n        }\n    }\n}\n</code></pre><p>其中变量selector即就是你想禁用的class,由于ie低版本写法上有点差异，所以需要做个兼容处理，另外，由于浏览器对样式名称格式解析和你写的稍微有那么一两个空格的差距，所以需要将空格去掉对比下。到这里，基本就简要的介绍了下document.styleSheets，当然，我们有时会用到addRule，具体用法就不说了，铺一段我写的一个方法，体会下就可以了：</p>\n<pre><code>function styleSheets(){\n    var sheets = document.styleSheets, //获得页面中所有样式\n        isIE = document.addEventListener ? false : true;\n\n    var insertRule = function(classStr){\n        var lastsheet = sheets[sheets.length -1];\n        lastsheet[isIE ? &apos;addRule&apos; : &apos;insertRule&apos;](classStr,lastsheet[isIE ? &apos;rules&apos; : &apos;cssRules&apos;].length);\n    } \n    var deleteRule = function(selector){\n        var targetInfo; //存储目标class信息\n          for(var i=0;i&lt;sheets.length;i++){\n        var rs = sheets[i][isIE ? &apos;rules&apos; : &apos;cssRules&apos;] || [];//跨域引入的时候，取不到，会为空，所以默认为一个数组\n            for(var j=0;j&lt;rs.length;j++){\n                  if(rs[j].selectorText.replace(/\\s*/ig,&apos;&apos;) == selector.replace(/\\s*/ig,&apos;&apos;)){//由于浏览器解析出的样式格式和自己书写的稍微有点差异，所以清除空格作比对\n                    targetInfo = {parentIndex:i,curIndex:j}\n                    break;\n                  }\n            }\n          }\n          console.log(targetInfo);\n          if(targetInfo){\n              sheets[targetInfo.parentIndex][isIE ? &apos;removeRule&apos; : &apos;deleteRule&apos;](targetInfo.curIndex);\n          }\n    }\n\n    return {\n        insertRule:insertRule,\n        deleteRule:deleteRule\n    }\n}\n</code></pre><p>可以将这段代码直接copy到你的项目中，直接执行下，如var styletool = styleSheets();然后使用styletool.deleteRule(selector)，然后你就可删除你想删除的样式，当然，能成功删除的，都是脸长得帅的，长得丑的，可能会发现，这方法压根没用，所以我不得不说下这些个方法的局限性：</p>\n<ul>\n<li>如果你当前页面的样是都是通过&lt;style&gt;&lt;/style&gt;这样引入的，那么执行结果就是我们所想的那样。</li>\n<li>如果，你的载入的外部css文件是和当前页面在一个域下面的，也就是<strong>不跨域</strong>的，那么它的执行结果也是入门所想。</li>\n</ul>\n<p>以上两种情况此方法都是适用的。下面就来说说有问题的情况：</p>\n<ul>\n<li>如果，如果你用的chrome浏览器,而且是只是随便写了静态页面测试，没有启动一个本地或者线上服务的情况下，你载入了一个随便写的css文件（线上文件除外），这样就不起作用了。不是方法不对，是因为浏览器不让你这么做，所以你需要起个本地服务或者在线上的一个服务。然后就成功了。当然，如果你是第一种情况，那么就不需要起服务了。</li>\n<li>如果，若果你引入了其他域下的css文件，而且此刻你很想很想去禁用掉它其中的样式，那么，这个方法是行不通的，因为通过js读不到跨域样式文件中的规则，这就需要你真的看看外部引入的class是否真的很有必要，如果不是很特别（其实都不特别），你就稍微改下当前的代码结构，不用它的了。</li>\n</ul>\n<p>上面的方法在google下亲测确实在规范之内是有用的，如果有什么问题，可以探讨下，或者对我刚开始抛出的问题有其他的解决方案，都可以探讨下，另外原测试代码在<a href=\"http://minisky.duapp.com/demo/sem/download.html\">http://minisky.duapp.com/demo/sem/download.html</a>，这个页面本来是我想写一篇关于touch事件的文章，从实际项目中做的一个移动推广页面中扒出来的一个简略版，一并拿来在上面测试。最好是在控制台调出移动版页面看。直接调用 styletool.deleteRule(selector)就可测试。</p>"},{"title":"h5本地图片预览简述","date":"2016-11-15T11:00:35.000Z","_content":"> 不知为什么，写着写着，心里静的自己都怕\n\n上一篇简单说了下ajax文件上功能。只是针对这一h5技术做了简单试用，没有做必要的体验优化。在我们做上传功能时，经常会有测试或者产品说，你这上传功能体验好差，等在那里半天才看到图片，每当听到这样的抱怨的时候，心理苦的不知道说啥。这要是搁在以前，或许我还可以把这个锅甩给服务端的同学（谁叫你们响应的这么慢，你看看，这都快要年底了，图片还看不到。），但是，现在已经是所谓的h5时代了，这锅还得自己背。下面就来说说为什么这锅要前端来背。\n众所周知，h5带来了好多新的前端技术，例如那什么，是在说不出来，自己体会吧。其中就有一个叫FileReader的东西，它的功能基本通过名字可以看得出来（起一个好名字就是这么重要），通过它可以获得文件句柄，然后利用文件句柄来把文件读入内存，并且读取文件中的数据，有异步和同步两种，总有一款适合你。当然它还拥有相当一部分方法，来达到整个操作流程。有点走远了，还是先回到怎样优化我们图片上传功能吧。\n由于FileReader对象可以读取本地文件<!--more-->，那么我们就可以直接先把图片读取到页面，直接展示，这样就可以使图片在不用上传的情况下直接展示在页面中，用户在选中图片后，立马显示出来，体验好感蹭蹭的往上涨。现在就涉及到怎么读取到页面中，方法如下：\n\n     var reader = new FileReader();\n  \treader.onload = function(evt){\n  \t\tconsole.log(evt.target.result);//evt.target.result为都区完成的数据\n      \t\t\n  \t}\n  \treader.readAsDataURL(file);//file参数其中一种就是input中的文件对象。\n\n就这么简单的几行代码，就可以实现文件读取操作，上面用到了FileReader的readAsDataURL方法，此方法会把文件读取为base64格式数据（跟canvas的toDataURL方法获得是一抹一样的数据），然后，你可以直接赋值给img的src属性，这样就可以不用等待服务端返回图片地址，等待图片加载。可参考**[Demo](http://minisky.duapp.com/skyexample/upload)**当然FileReader还有其他的方法如下图：\n![](1.png)\n途中红色区域就是读取时的类型设置。其他功能看字面意思体会，都似曾相识。\n另外，可以及时显示图片还有另外一种方法window.URL.createObjectURL(blob || file),此方法会根据传入的参数创建一个指向该参数对象的URL，这个URL的生命仅存在于它被创建的这个文档里，新的对象URL指向执行的File对象或者是Blob对象，然后就可以通过这个URL来展示图片。\n在这个时候，我们又要怀念一下IE了，以前都说IE怎么怎么不行，这次真不敢这样说，IE6就开始支持显示本地路径的图片，后面的版本通过Microsoft.AlphaImageLoader滤镜也可以实现此方法（IE8貌似也支持本地路径显示），滤镜的具体方法我就不写了，可以自行网上查资料了解。\n\n另外再提一点，既然我们把数据读出来了，那么理论上配合前一篇提到的ajax方法和FormData就可以直接把当前获得base64数据上传了，通过FormData的append方法实现。服务端进行相应的解析（没试过，之前只知道通过二进制形式上传，不过据说可以）。本篇文章就到这，以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流","source":"_posts/h5本地图片预览简述.md","raw":"---\ntitle: h5本地图片预览简述\ndate: 2016-11-15 19:00:35\ntags: javascript\ncategories: 技术\n---\n> 不知为什么，写着写着，心里静的自己都怕\n\n上一篇简单说了下ajax文件上功能。只是针对这一h5技术做了简单试用，没有做必要的体验优化。在我们做上传功能时，经常会有测试或者产品说，你这上传功能体验好差，等在那里半天才看到图片，每当听到这样的抱怨的时候，心理苦的不知道说啥。这要是搁在以前，或许我还可以把这个锅甩给服务端的同学（谁叫你们响应的这么慢，你看看，这都快要年底了，图片还看不到。），但是，现在已经是所谓的h5时代了，这锅还得自己背。下面就来说说为什么这锅要前端来背。\n众所周知，h5带来了好多新的前端技术，例如那什么，是在说不出来，自己体会吧。其中就有一个叫FileReader的东西，它的功能基本通过名字可以看得出来（起一个好名字就是这么重要），通过它可以获得文件句柄，然后利用文件句柄来把文件读入内存，并且读取文件中的数据，有异步和同步两种，总有一款适合你。当然它还拥有相当一部分方法，来达到整个操作流程。有点走远了，还是先回到怎样优化我们图片上传功能吧。\n由于FileReader对象可以读取本地文件<!--more-->，那么我们就可以直接先把图片读取到页面，直接展示，这样就可以使图片在不用上传的情况下直接展示在页面中，用户在选中图片后，立马显示出来，体验好感蹭蹭的往上涨。现在就涉及到怎么读取到页面中，方法如下：\n\n     var reader = new FileReader();\n  \treader.onload = function(evt){\n  \t\tconsole.log(evt.target.result);//evt.target.result为都区完成的数据\n      \t\t\n  \t}\n  \treader.readAsDataURL(file);//file参数其中一种就是input中的文件对象。\n\n就这么简单的几行代码，就可以实现文件读取操作，上面用到了FileReader的readAsDataURL方法，此方法会把文件读取为base64格式数据（跟canvas的toDataURL方法获得是一抹一样的数据），然后，你可以直接赋值给img的src属性，这样就可以不用等待服务端返回图片地址，等待图片加载。可参考**[Demo](http://minisky.duapp.com/skyexample/upload)**当然FileReader还有其他的方法如下图：\n![](1.png)\n途中红色区域就是读取时的类型设置。其他功能看字面意思体会，都似曾相识。\n另外，可以及时显示图片还有另外一种方法window.URL.createObjectURL(blob || file),此方法会根据传入的参数创建一个指向该参数对象的URL，这个URL的生命仅存在于它被创建的这个文档里，新的对象URL指向执行的File对象或者是Blob对象，然后就可以通过这个URL来展示图片。\n在这个时候，我们又要怀念一下IE了，以前都说IE怎么怎么不行，这次真不敢这样说，IE6就开始支持显示本地路径的图片，后面的版本通过Microsoft.AlphaImageLoader滤镜也可以实现此方法（IE8貌似也支持本地路径显示），滤镜的具体方法我就不写了，可以自行网上查资料了解。\n\n另外再提一点，既然我们把数据读出来了，那么理论上配合前一篇提到的ajax方法和FormData就可以直接把当前获得base64数据上传了，通过FormData的append方法实现。服务端进行相应的解析（没试过，之前只知道通过二进制形式上传，不过据说可以）。本篇文章就到这，以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流","slug":"h5本地图片预览简述","published":1,"updated":"2016-11-15T11:04:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuwa0008325v4mrt5ogv","content":"<blockquote>\n<p>不知为什么，写着写着，心里静的自己都怕</p>\n</blockquote>\n<p>上一篇简单说了下ajax文件上功能。只是针对这一h5技术做了简单试用，没有做必要的体验优化。在我们做上传功能时，经常会有测试或者产品说，你这上传功能体验好差，等在那里半天才看到图片，每当听到这样的抱怨的时候，心理苦的不知道说啥。这要是搁在以前，或许我还可以把这个锅甩给服务端的同学（谁叫你们响应的这么慢，你看看，这都快要年底了，图片还看不到。），但是，现在已经是所谓的h5时代了，这锅还得自己背。下面就来说说为什么这锅要前端来背。<br>众所周知，h5带来了好多新的前端技术，例如那什么，是在说不出来，自己体会吧。其中就有一个叫FileReader的东西，它的功能基本通过名字可以看得出来（起一个好名字就是这么重要），通过它可以获得文件句柄，然后利用文件句柄来把文件读入内存，并且读取文件中的数据，有异步和同步两种，总有一款适合你。当然它还拥有相当一部分方法，来达到整个操作流程。有点走远了，还是先回到怎样优化我们图片上传功能吧。<br>由于FileReader对象可以读取本地文件<a id=\"more\"></a>，那么我们就可以直接先把图片读取到页面，直接展示，这样就可以使图片在不用上传的情况下直接展示在页面中，用户在选中图片后，立马显示出来，体验好感蹭蹭的往上涨。现在就涉及到怎么读取到页面中，方法如下：</p>\n<pre><code>var reader = new FileReader();\n reader.onload = function(evt){\n     console.log(evt.target.result);//evt.target.result为都区完成的数据\n\n }\n reader.readAsDataURL(file);//file参数其中一种就是input中的文件对象。\n</code></pre><p>就这么简单的几行代码，就可以实现文件读取操作，上面用到了FileReader的readAsDataURL方法，此方法会把文件读取为base64格式数据（跟canvas的toDataURL方法获得是一抹一样的数据），然后，你可以直接赋值给img的src属性，这样就可以不用等待服务端返回图片地址，等待图片加载。可参考<strong><a href=\"http://minisky.duapp.com/skyexample/upload\" target=\"_blank\" rel=\"external\">Demo</a></strong>当然FileReader还有其他的方法如下图：<br><img src=\"1.png\" alt=\"\"><br>途中红色区域就是读取时的类型设置。其他功能看字面意思体会，都似曾相识。<br>另外，可以及时显示图片还有另外一种方法window.URL.createObjectURL(blob || file),此方法会根据传入的参数创建一个指向该参数对象的URL，这个URL的生命仅存在于它被创建的这个文档里，新的对象URL指向执行的File对象或者是Blob对象，然后就可以通过这个URL来展示图片。<br>在这个时候，我们又要怀念一下IE了，以前都说IE怎么怎么不行，这次真不敢这样说，IE6就开始支持显示本地路径的图片，后面的版本通过Microsoft.AlphaImageLoader滤镜也可以实现此方法（IE8貌似也支持本地路径显示），滤镜的具体方法我就不写了，可以自行网上查资料了解。</p>\n<p>另外再提一点，既然我们把数据读出来了，那么理论上配合前一篇提到的ajax方法和FormData就可以直接把当前获得base64数据上传了，通过FormData的append方法实现。服务端进行相应的解析（没试过，之前只知道通过二进制形式上传，不过据说可以）。本篇文章就到这，以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流</p>\n","excerpt":"<blockquote>\n<p>不知为什么，写着写着，心里静的自己都怕</p>\n</blockquote>\n<p>上一篇简单说了下ajax文件上功能。只是针对这一h5技术做了简单试用，没有做必要的体验优化。在我们做上传功能时，经常会有测试或者产品说，你这上传功能体验好差，等在那里半天才看到图片，每当听到这样的抱怨的时候，心理苦的不知道说啥。这要是搁在以前，或许我还可以把这个锅甩给服务端的同学（谁叫你们响应的这么慢，你看看，这都快要年底了，图片还看不到。），但是，现在已经是所谓的h5时代了，这锅还得自己背。下面就来说说为什么这锅要前端来背。<br>众所周知，h5带来了好多新的前端技术，例如那什么，是在说不出来，自己体会吧。其中就有一个叫FileReader的东西，它的功能基本通过名字可以看得出来（起一个好名字就是这么重要），通过它可以获得文件句柄，然后利用文件句柄来把文件读入内存，并且读取文件中的数据，有异步和同步两种，总有一款适合你。当然它还拥有相当一部分方法，来达到整个操作流程。有点走远了，还是先回到怎样优化我们图片上传功能吧。<br>由于FileReader对象可以读取本地文件","more":"，那么我们就可以直接先把图片读取到页面，直接展示，这样就可以使图片在不用上传的情况下直接展示在页面中，用户在选中图片后，立马显示出来，体验好感蹭蹭的往上涨。现在就涉及到怎么读取到页面中，方法如下：</p>\n<pre><code>var reader = new FileReader();\n reader.onload = function(evt){\n     console.log(evt.target.result);//evt.target.result为都区完成的数据\n\n }\n reader.readAsDataURL(file);//file参数其中一种就是input中的文件对象。\n</code></pre><p>就这么简单的几行代码，就可以实现文件读取操作，上面用到了FileReader的readAsDataURL方法，此方法会把文件读取为base64格式数据（跟canvas的toDataURL方法获得是一抹一样的数据），然后，你可以直接赋值给img的src属性，这样就可以不用等待服务端返回图片地址，等待图片加载。可参考<strong><a href=\"http://minisky.duapp.com/skyexample/upload\">Demo</a></strong>当然FileReader还有其他的方法如下图：<br><img src=\"1.png\" alt=\"\"><br>途中红色区域就是读取时的类型设置。其他功能看字面意思体会，都似曾相识。<br>另外，可以及时显示图片还有另外一种方法window.URL.createObjectURL(blob || file),此方法会根据传入的参数创建一个指向该参数对象的URL，这个URL的生命仅存在于它被创建的这个文档里，新的对象URL指向执行的File对象或者是Blob对象，然后就可以通过这个URL来展示图片。<br>在这个时候，我们又要怀念一下IE了，以前都说IE怎么怎么不行，这次真不敢这样说，IE6就开始支持显示本地路径的图片，后面的版本通过Microsoft.AlphaImageLoader滤镜也可以实现此方法（IE8貌似也支持本地路径显示），滤镜的具体方法我就不写了，可以自行网上查资料了解。</p>\n<p>另外再提一点，既然我们把数据读出来了，那么理论上配合前一篇提到的ajax方法和FormData就可以直接把当前获得base64数据上传了，通过FormData的append方法实现。服务端进行相应的解析（没试过，之前只知道通过二进制形式上传，不过据说可以）。本篇文章就到这，以上都是个人粗浅的认识以及蹩脚的解决方案，如果有讲错或者没讲清楚的地方，欢迎留言交流</p>"},{"title":"throttle与debounce简述","date":"2016-11-30T11:35:16.000Z","_content":"> 这是你第一次秀恩爱，你说：你要结婚了。\n\n人生处处是意外，处处是无奈。有些事，过去了就过去了，过不去，就是遗憾了。不扯了，越扯感觉越蓝瘦。回归正题，来说说js中throttle与debounce。\nthrottle，词如其名，就是阀门的意思，当然更确切的叫节流阀。它主要是用来防止在较短时间内多次调用某个方法导致浏览器性能降低。debounce，中文译为防反跳，防抖之类的（想象一下你把一个弹簧压下去一直不动，直到你放手的时候，它才恢复原状的那个样子），他主要是防止多次触发同样的事件而导致多次调用同一个方法，发生一些让人意外的结果。throttle多用于类似滚动，拖动，滑动之类的，而debounce多用于频率不那么高的事件（鉴于debounce我没怎么用过，所以你懂得）。下面来看看具体实现吧：<!--more-->\nthrottle：\n\n    function throttle(delay,callback){//delay间隔内必然执行一次\n    \tvar last,//上次调用时间\n    \t\ttimer = null;\n    \treturn function(){\n    \t\tvar curr = Date.now(),//当前调用时间\n    \t\t\tcontext = this,\n    \t\t\targs = arguments;\n    \t\tclearTimeout(timer);//清除上个定时器\n    \t\tif(!last){\n    \t\t\tlast = curr;//第一次调用赋值\n    \t\t}\n    \t\tif((curr - last) > delay){//若时间间隔大于给定延时，则立即调用回调\n    \t\t\tcallback.apply(context,args);\n    \t\t\tlast = curr;//将最后一次时间改为当前时间\n    \t\t}else{//如果时间间隔较小，则延时执行\n    \t\t\ttimer = setTimeout(function(){\n    \t\t\t\tcallback.apply(context,args);\n    \t\t\t},delay);\n    \t\t}\n    \t}\n    }\n具体注释已给出，应该都明白了。在最近写的一个弹性滚动案例中，就用到这个方式（后边文章会介绍下怎么写的），由于在移动端不断触摸滑动时，touchmove在不停的触发（好像每秒有几百次，具体多少其实我也不清楚），如果在每次touchmove之后都去操作元素位置，这样在移动端那脆弱的小生命有点吃不消，会出现卡顿之类的，所以，节流在这个时候显得很重要，算是救命仙药。上面给出节流写法只是其中一种，还有好多实现方式，当然大同小异，不过更精细的实现适用性比较高，有兴趣的话可参照underscore.js中的实现方式。\ndebounce：\n\n    var debounce = function(delay, callback){\n      var timer;\n      return function(){\n        var ctx = this, args = arguments\n        clearTimeout(timer)\n        timer = setTimeout(function(){\n            callback.apply(ctx, args)\n        }, delay)\n      }\n    }\n上面是一个debounce的简单实现，在实际中你可以用于监听用户输入发送ajax请求频率控制，减少服务端压力，也可以控制多次点击按钮触发一些多次提交之类的问题。\n最后再说明一点，throttle和debounce必须要用在适合的场景才能发挥它最大功效，切记不要在该用throttle的时候你用了debounce，这样的后果是相当糟糕的，假设你在touchmove或者mousemove一个元素的时候，你用了debounce模式，那它很可能就不是连续的动画了，很可能就变成跳跳猪了，产品会提刀来见你。本文只是对这两个设计思路的一种具体实现，实现方式因人而异，只要在主旨思想内就行。","source":"_posts/throttle与debounce简述.md","raw":"---\ntitle: throttle与debounce简述\ndate: 2016-11-30 19:35:16\ntags: javascript\ncategories: 技术\n---\n> 这是你第一次秀恩爱，你说：你要结婚了。\n\n人生处处是意外，处处是无奈。有些事，过去了就过去了，过不去，就是遗憾了。不扯了，越扯感觉越蓝瘦。回归正题，来说说js中throttle与debounce。\nthrottle，词如其名，就是阀门的意思，当然更确切的叫节流阀。它主要是用来防止在较短时间内多次调用某个方法导致浏览器性能降低。debounce，中文译为防反跳，防抖之类的（想象一下你把一个弹簧压下去一直不动，直到你放手的时候，它才恢复原状的那个样子），他主要是防止多次触发同样的事件而导致多次调用同一个方法，发生一些让人意外的结果。throttle多用于类似滚动，拖动，滑动之类的，而debounce多用于频率不那么高的事件（鉴于debounce我没怎么用过，所以你懂得）。下面来看看具体实现吧：<!--more-->\nthrottle：\n\n    function throttle(delay,callback){//delay间隔内必然执行一次\n    \tvar last,//上次调用时间\n    \t\ttimer = null;\n    \treturn function(){\n    \t\tvar curr = Date.now(),//当前调用时间\n    \t\t\tcontext = this,\n    \t\t\targs = arguments;\n    \t\tclearTimeout(timer);//清除上个定时器\n    \t\tif(!last){\n    \t\t\tlast = curr;//第一次调用赋值\n    \t\t}\n    \t\tif((curr - last) > delay){//若时间间隔大于给定延时，则立即调用回调\n    \t\t\tcallback.apply(context,args);\n    \t\t\tlast = curr;//将最后一次时间改为当前时间\n    \t\t}else{//如果时间间隔较小，则延时执行\n    \t\t\ttimer = setTimeout(function(){\n    \t\t\t\tcallback.apply(context,args);\n    \t\t\t},delay);\n    \t\t}\n    \t}\n    }\n具体注释已给出，应该都明白了。在最近写的一个弹性滚动案例中，就用到这个方式（后边文章会介绍下怎么写的），由于在移动端不断触摸滑动时，touchmove在不停的触发（好像每秒有几百次，具体多少其实我也不清楚），如果在每次touchmove之后都去操作元素位置，这样在移动端那脆弱的小生命有点吃不消，会出现卡顿之类的，所以，节流在这个时候显得很重要，算是救命仙药。上面给出节流写法只是其中一种，还有好多实现方式，当然大同小异，不过更精细的实现适用性比较高，有兴趣的话可参照underscore.js中的实现方式。\ndebounce：\n\n    var debounce = function(delay, callback){\n      var timer;\n      return function(){\n        var ctx = this, args = arguments\n        clearTimeout(timer)\n        timer = setTimeout(function(){\n            callback.apply(ctx, args)\n        }, delay)\n      }\n    }\n上面是一个debounce的简单实现，在实际中你可以用于监听用户输入发送ajax请求频率控制，减少服务端压力，也可以控制多次点击按钮触发一些多次提交之类的问题。\n最后再说明一点，throttle和debounce必须要用在适合的场景才能发挥它最大功效，切记不要在该用throttle的时候你用了debounce，这样的后果是相当糟糕的，假设你在touchmove或者mousemove一个元素的时候，你用了debounce模式，那它很可能就不是连续的动画了，很可能就变成跳跳猪了，产品会提刀来见你。本文只是对这两个设计思路的一种具体实现，实现方式因人而异，只要在主旨思想内就行。","slug":"throttle与debounce简述","published":1,"updated":"2016-11-30T11:35:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuwf000c325vzx1ighrs","content":"<blockquote>\n<p>这是你第一次秀恩爱，你说：你要结婚了。</p>\n</blockquote>\n<p>人生处处是意外，处处是无奈。有些事，过去了就过去了，过不去，就是遗憾了。不扯了，越扯感觉越蓝瘦。回归正题，来说说js中throttle与debounce。<br>throttle，词如其名，就是阀门的意思，当然更确切的叫节流阀。它主要是用来防止在较短时间内多次调用某个方法导致浏览器性能降低。debounce，中文译为防反跳，防抖之类的（想象一下你把一个弹簧压下去一直不动，直到你放手的时候，它才恢复原状的那个样子），他主要是防止多次触发同样的事件而导致多次调用同一个方法，发生一些让人意外的结果。throttle多用于类似滚动，拖动，滑动之类的，而debounce多用于频率不那么高的事件（鉴于debounce我没怎么用过，所以你懂得）。下面来看看具体实现吧：<a id=\"more\"></a><br>throttle：</p>\n<pre><code>function throttle(delay,callback){//delay间隔内必然执行一次\n    var last,//上次调用时间\n        timer = null;\n    return function(){\n        var curr = Date.now(),//当前调用时间\n            context = this,\n            args = arguments;\n        clearTimeout(timer);//清除上个定时器\n        if(!last){\n            last = curr;//第一次调用赋值\n        }\n        if((curr - last) &gt; delay){//若时间间隔大于给定延时，则立即调用回调\n            callback.apply(context,args);\n            last = curr;//将最后一次时间改为当前时间\n        }else{//如果时间间隔较小，则延时执行\n            timer = setTimeout(function(){\n                callback.apply(context,args);\n            },delay);\n        }\n    }\n}\n</code></pre><p>具体注释已给出，应该都明白了。在最近写的一个弹性滚动案例中，就用到这个方式（后边文章会介绍下怎么写的），由于在移动端不断触摸滑动时，touchmove在不停的触发（好像每秒有几百次，具体多少其实我也不清楚），如果在每次touchmove之后都去操作元素位置，这样在移动端那脆弱的小生命有点吃不消，会出现卡顿之类的，所以，节流在这个时候显得很重要，算是救命仙药。上面给出节流写法只是其中一种，还有好多实现方式，当然大同小异，不过更精细的实现适用性比较高，有兴趣的话可参照underscore.js中的实现方式。<br>debounce：</p>\n<pre><code>var debounce = function(delay, callback){\n  var timer;\n  return function(){\n    var ctx = this, args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(function(){\n        callback.apply(ctx, args)\n    }, delay)\n  }\n}\n</code></pre><p>上面是一个debounce的简单实现，在实际中你可以用于监听用户输入发送ajax请求频率控制，减少服务端压力，也可以控制多次点击按钮触发一些多次提交之类的问题。<br>最后再说明一点，throttle和debounce必须要用在适合的场景才能发挥它最大功效，切记不要在该用throttle的时候你用了debounce，这样的后果是相当糟糕的，假设你在touchmove或者mousemove一个元素的时候，你用了debounce模式，那它很可能就不是连续的动画了，很可能就变成跳跳猪了，产品会提刀来见你。本文只是对这两个设计思路的一种具体实现，实现方式因人而异，只要在主旨思想内就行。</p>\n","excerpt":"<blockquote>\n<p>这是你第一次秀恩爱，你说：你要结婚了。</p>\n</blockquote>\n<p>人生处处是意外，处处是无奈。有些事，过去了就过去了，过不去，就是遗憾了。不扯了，越扯感觉越蓝瘦。回归正题，来说说js中throttle与debounce。<br>throttle，词如其名，就是阀门的意思，当然更确切的叫节流阀。它主要是用来防止在较短时间内多次调用某个方法导致浏览器性能降低。debounce，中文译为防反跳，防抖之类的（想象一下你把一个弹簧压下去一直不动，直到你放手的时候，它才恢复原状的那个样子），他主要是防止多次触发同样的事件而导致多次调用同一个方法，发生一些让人意外的结果。throttle多用于类似滚动，拖动，滑动之类的，而debounce多用于频率不那么高的事件（鉴于debounce我没怎么用过，所以你懂得）。下面来看看具体实现吧：","more":"<br>throttle：</p>\n<pre><code>function throttle(delay,callback){//delay间隔内必然执行一次\n    var last,//上次调用时间\n        timer = null;\n    return function(){\n        var curr = Date.now(),//当前调用时间\n            context = this,\n            args = arguments;\n        clearTimeout(timer);//清除上个定时器\n        if(!last){\n            last = curr;//第一次调用赋值\n        }\n        if((curr - last) &gt; delay){//若时间间隔大于给定延时，则立即调用回调\n            callback.apply(context,args);\n            last = curr;//将最后一次时间改为当前时间\n        }else{//如果时间间隔较小，则延时执行\n            timer = setTimeout(function(){\n                callback.apply(context,args);\n            },delay);\n        }\n    }\n}\n</code></pre><p>具体注释已给出，应该都明白了。在最近写的一个弹性滚动案例中，就用到这个方式（后边文章会介绍下怎么写的），由于在移动端不断触摸滑动时，touchmove在不停的触发（好像每秒有几百次，具体多少其实我也不清楚），如果在每次touchmove之后都去操作元素位置，这样在移动端那脆弱的小生命有点吃不消，会出现卡顿之类的，所以，节流在这个时候显得很重要，算是救命仙药。上面给出节流写法只是其中一种，还有好多实现方式，当然大同小异，不过更精细的实现适用性比较高，有兴趣的话可参照underscore.js中的实现方式。<br>debounce：</p>\n<pre><code>var debounce = function(delay, callback){\n  var timer;\n  return function(){\n    var ctx = this, args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(function(){\n        callback.apply(ctx, args)\n    }, delay)\n  }\n}\n</code></pre><p>上面是一个debounce的简单实现，在实际中你可以用于监听用户输入发送ajax请求频率控制，减少服务端压力，也可以控制多次点击按钮触发一些多次提交之类的问题。<br>最后再说明一点，throttle和debounce必须要用在适合的场景才能发挥它最大功效，切记不要在该用throttle的时候你用了debounce，这样的后果是相当糟糕的，假设你在touchmove或者mousemove一个元素的时候，你用了debounce模式，那它很可能就不是连续的动画了，很可能就变成跳跳猪了，产品会提刀来见你。本文只是对这两个设计思路的一种具体实现，实现方式因人而异，只要在主旨思想内就行。</p>"},{"title":"起航","date":"2016-10-17T13:38:24.000Z","_content":"\n>梦里不知身是客，一晌贪欢\n\n**在**前端已经摸爬滚打了两年多了，说短也挺长的（别想歪），算是小白一枚。最近也是突来兴致，开了个小博客，分享一些web前端技术，一方面也算是自己的笔记，另一方面，如果能帮助一些前端新人也是一件乐事。在今后的文章中，我都会以自己在实际中遇到的例子为主，进行由浅到深的一个剖析，当然其中也会附着不少源码以及造成功的轮子。另外，有些例子我会直接在[http://minisky.duapp.com/](http://minisky.duapp.com/)这个简易网站中给出。当然，由于我自身也是能力有限，经验也不足，所以难免有些文章会出现错误，希望能够得到谅解，更希望能够留言指出，并且能够互相学习，交流。我邮箱1264593211@qq.com，欢迎随时骚扰。","source":"_posts/起航.md","raw":"---\ntitle: 起航\ndate: 2016-10-17 21:38:24\ntags: 生活\ncategories: 随笔\n---\n\n>梦里不知身是客，一晌贪欢\n\n**在**前端已经摸爬滚打了两年多了，说短也挺长的（别想歪），算是小白一枚。最近也是突来兴致，开了个小博客，分享一些web前端技术，一方面也算是自己的笔记，另一方面，如果能帮助一些前端新人也是一件乐事。在今后的文章中，我都会以自己在实际中遇到的例子为主，进行由浅到深的一个剖析，当然其中也会附着不少源码以及造成功的轮子。另外，有些例子我会直接在[http://minisky.duapp.com/](http://minisky.duapp.com/)这个简易网站中给出。当然，由于我自身也是能力有限，经验也不足，所以难免有些文章会出现错误，希望能够得到谅解，更希望能够留言指出，并且能够互相学习，交流。我邮箱1264593211@qq.com，欢迎随时骚扰。","slug":"起航","published":1,"updated":"2016-10-18T13:04:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuwj000f325venmsxn82","content":"<blockquote>\n<p>梦里不知身是客，一晌贪欢</p>\n</blockquote>\n<p><strong>在</strong>前端已经摸爬滚打了两年多了，说短也挺长的（别想歪），算是小白一枚。最近也是突来兴致，开了个小博客，分享一些web前端技术，一方面也算是自己的笔记，另一方面，如果能帮助一些前端新人也是一件乐事。在今后的文章中，我都会以自己在实际中遇到的例子为主，进行由浅到深的一个剖析，当然其中也会附着不少源码以及造成功的轮子。另外，有些例子我会直接在<a href=\"http://minisky.duapp.com/\" target=\"_blank\" rel=\"external\">http://minisky.duapp.com/</a>这个简易网站中给出。当然，由于我自身也是能力有限，经验也不足，所以难免有些文章会出现错误，希望能够得到谅解，更希望能够留言指出，并且能够互相学习，交流。我邮箱1264593211@qq.com，欢迎随时骚扰。</p>\n","excerpt":"","more":"<blockquote>\n<p>梦里不知身是客，一晌贪欢</p>\n</blockquote>\n<p><strong>在</strong>前端已经摸爬滚打了两年多了，说短也挺长的（别想歪），算是小白一枚。最近也是突来兴致，开了个小博客，分享一些web前端技术，一方面也算是自己的笔记，另一方面，如果能帮助一些前端新人也是一件乐事。在今后的文章中，我都会以自己在实际中遇到的例子为主，进行由浅到深的一个剖析，当然其中也会附着不少源码以及造成功的轮子。另外，有些例子我会直接在<a href=\"http://minisky.duapp.com/\">http://minisky.duapp.com/</a>这个简易网站中给出。当然，由于我自身也是能力有限，经验也不足，所以难免有些文章会出现错误，希望能够得到谅解，更希望能够留言指出，并且能够互相学习，交流。我邮箱1264593211@qq.com，欢迎随时骚扰。</p>\n"},{"title":"移动端网页调试之chrome remote","date":"2016-11-24T11:03:13.000Z","_content":"\n> 冷风吹过，又是一年末\n\n北方寒风刮来的时候，惊奇的发现，又到年末了，但是回想不起来这一年做了什么，时间过得真的好快！\n最近在浏览一个社区的时候，偶然发现了一篇文章，讲的是关于如何在移动端页面做调试的，内容中介绍了通过fiddler工具的一个插件来通过日志的方式进行调试，但是总感觉跟我在代码中弹个框这种低端调试方法差不多，所以就没往下实践，有兴趣的同学可以网上搜搜相关方法。做过移动端开发的都可能或多或少面临过如何在移动端调试的问题，目前大多数前端可能我一样，在pc端打开chrome浏览器控制台中的移动模拟选项，然后就开始在上面调试，基本上可以满足大部分正常的移动端网站的开发，但是在目前HybridApp(混合模式移动应用)流行的轻快下，如果还采用之前的方式，显然是不行的，因为这个时候我们需要跟app客户端的同学交流。所以前端小伙伴总是在寻找如何在app上也能像普通网页一样调试，在没找到之前，我用的是alert这种原始方式（想起了年少面试时悲惨的一幕），也确实解决之前遇到的好多问题，但是效率太低了，而且只适合逻辑的调试或者代码错误调试，比如样式之类的，就不用想了（之前样式的都是通过fiddler抓包文件，在本地修改，效率还行）。不过最近发现了一个非常不错的方法，那就是通过chrome remote工具来进行调试，满足了好多我们想要的功能，下面就做个简单介绍。\n**chrome remote**是一个针对**Android**的远程调试工具，他能实现的**部分功能**如下：\n> * 调试移动端普通网站页面。\n> * 调试安卓App中的WebView页面\n> * 本地页面和移动设备页面实时同步\n\n<!--more-->（**ios**系统上的调试，我目前没有试过，一般如果你有台mac一切都会的变得简单，而且ios系统上bug不是很多，而且都比较容易解决，但是android就不一样了，国内各种杂七杂八的android手机，bug贡献率那是蹭蹭的往上涨。）\n\n**调试环境**如下：\n> * pc上安装一个chrome浏览器（目前随便下一个版本都在50多）\n> * 一台android设备）。\n\n**调试对象**\n如果是调试普通移动端网页，则需要在android设备上安装一个chrome浏览器，并且系统是4.0+（4.0+这个只是参考了其他文章这么说，自己没试过4.0-的设备是否可行）。\n如果是调试app中webview页面，则需要4.4+系统（4.4—没试过），并且需要app在webview初始化的时候增加相应的配置，配置如下：\n\n    if (Build.VERSION.SDK_INT >=Build.VERSION_CODES.KITKAT) {  \n        WebView.setWebContentsDebuggingEnabled(true);  //最好是加上调试控制，例如只在测试版中开启此功能，防止正式版出现安全问题\n    }\n    \n上面的都准备好了之后就可以开始尝试了。首先将手机连接至pc，pc上最好安装一些什么手机应用管理之类的软件，例如腾讯的安全管家中自带的手机管理（随便什么相关的软件都行，主要是可以避免安装驱动之类的）。首次连接的时候会弹出：\n![](1.png)\n勾选点确定即可，下次就不会再出现了(由于之前手机已经勾选了一致通过，所以又找了个)。然后，打开**手机设置**，先点击**开发人员选项**，将**usb调试打开**，然后返回上一层，点击**关于手机**，会出现手机的信息，多次点击版本号（有可能是系统版本号，不同手机表现不一致），会开启开发人员调试功能。具体如下图红框中所示：\n![](2.png)\n手机端以上完成之后，打开pc Chrome浏览器，点击菜单————更多工具———— 检查设备，如图：\n![](3.png)\n然后惊奇的发现米有检查设备选项，不要慌，此时在地址栏输入: [chrome://inspect/#devices](chrome://inspect/#devices) ,这样会看到如下图所示：\n![](4.png)\n如果此时手机设备已和pc链接好之后，会出现设备相关信息以及你目前在手机设备中运行的网页，如图：\n![](5.png)\n点击inspect按钮，会弹出一个窗口，对应的是此刻在手机上运行的页面，会看到和本地浏览器一样的界面，然后就可以进行调试了。下面一些是我在实际调试中的一些截图，仅做展示。\n**普通网页**\n![](6.png) \n**webview页面**\n ![](7.png)\n\n 关于调试方式还有好多，很多厂子都有做各种调试工具，大家可根据个人喜好来选择自己喜欢的一种。另外，本文是一篇工具使用介绍类文章，参考了好多其他精华文章，所以，如有跟某篇文章相似的地方，还请见谅。","source":"_posts/移动端网页调试之chrome-remote.md","raw":"---\ntitle: 移动端网页调试之chrome remote\ndate: 2016-11-24 19:03:13\ntags: tool\ncategories: 工具\n---\n\n> 冷风吹过，又是一年末\n\n北方寒风刮来的时候，惊奇的发现，又到年末了，但是回想不起来这一年做了什么，时间过得真的好快！\n最近在浏览一个社区的时候，偶然发现了一篇文章，讲的是关于如何在移动端页面做调试的，内容中介绍了通过fiddler工具的一个插件来通过日志的方式进行调试，但是总感觉跟我在代码中弹个框这种低端调试方法差不多，所以就没往下实践，有兴趣的同学可以网上搜搜相关方法。做过移动端开发的都可能或多或少面临过如何在移动端调试的问题，目前大多数前端可能我一样，在pc端打开chrome浏览器控制台中的移动模拟选项，然后就开始在上面调试，基本上可以满足大部分正常的移动端网站的开发，但是在目前HybridApp(混合模式移动应用)流行的轻快下，如果还采用之前的方式，显然是不行的，因为这个时候我们需要跟app客户端的同学交流。所以前端小伙伴总是在寻找如何在app上也能像普通网页一样调试，在没找到之前，我用的是alert这种原始方式（想起了年少面试时悲惨的一幕），也确实解决之前遇到的好多问题，但是效率太低了，而且只适合逻辑的调试或者代码错误调试，比如样式之类的，就不用想了（之前样式的都是通过fiddler抓包文件，在本地修改，效率还行）。不过最近发现了一个非常不错的方法，那就是通过chrome remote工具来进行调试，满足了好多我们想要的功能，下面就做个简单介绍。\n**chrome remote**是一个针对**Android**的远程调试工具，他能实现的**部分功能**如下：\n> * 调试移动端普通网站页面。\n> * 调试安卓App中的WebView页面\n> * 本地页面和移动设备页面实时同步\n\n<!--more-->（**ios**系统上的调试，我目前没有试过，一般如果你有台mac一切都会的变得简单，而且ios系统上bug不是很多，而且都比较容易解决，但是android就不一样了，国内各种杂七杂八的android手机，bug贡献率那是蹭蹭的往上涨。）\n\n**调试环境**如下：\n> * pc上安装一个chrome浏览器（目前随便下一个版本都在50多）\n> * 一台android设备）。\n\n**调试对象**\n如果是调试普通移动端网页，则需要在android设备上安装一个chrome浏览器，并且系统是4.0+（4.0+这个只是参考了其他文章这么说，自己没试过4.0-的设备是否可行）。\n如果是调试app中webview页面，则需要4.4+系统（4.4—没试过），并且需要app在webview初始化的时候增加相应的配置，配置如下：\n\n    if (Build.VERSION.SDK_INT >=Build.VERSION_CODES.KITKAT) {  \n        WebView.setWebContentsDebuggingEnabled(true);  //最好是加上调试控制，例如只在测试版中开启此功能，防止正式版出现安全问题\n    }\n    \n上面的都准备好了之后就可以开始尝试了。首先将手机连接至pc，pc上最好安装一些什么手机应用管理之类的软件，例如腾讯的安全管家中自带的手机管理（随便什么相关的软件都行，主要是可以避免安装驱动之类的）。首次连接的时候会弹出：\n![](1.png)\n勾选点确定即可，下次就不会再出现了(由于之前手机已经勾选了一致通过，所以又找了个)。然后，打开**手机设置**，先点击**开发人员选项**，将**usb调试打开**，然后返回上一层，点击**关于手机**，会出现手机的信息，多次点击版本号（有可能是系统版本号，不同手机表现不一致），会开启开发人员调试功能。具体如下图红框中所示：\n![](2.png)\n手机端以上完成之后，打开pc Chrome浏览器，点击菜单————更多工具———— 检查设备，如图：\n![](3.png)\n然后惊奇的发现米有检查设备选项，不要慌，此时在地址栏输入: [chrome://inspect/#devices](chrome://inspect/#devices) ,这样会看到如下图所示：\n![](4.png)\n如果此时手机设备已和pc链接好之后，会出现设备相关信息以及你目前在手机设备中运行的网页，如图：\n![](5.png)\n点击inspect按钮，会弹出一个窗口，对应的是此刻在手机上运行的页面，会看到和本地浏览器一样的界面，然后就可以进行调试了。下面一些是我在实际调试中的一些截图，仅做展示。\n**普通网页**\n![](6.png) \n**webview页面**\n ![](7.png)\n\n 关于调试方式还有好多，很多厂子都有做各种调试工具，大家可根据个人喜好来选择自己喜欢的一种。另外，本文是一篇工具使用介绍类文章，参考了好多其他精华文章，所以，如有跟某篇文章相似的地方，还请见谅。","slug":"移动端网页调试之chrome-remote","published":1,"updated":"2016-11-24T11:59:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuwo000k325vlemdjdfu","content":"<blockquote>\n<p>冷风吹过，又是一年末</p>\n</blockquote>\n<p>北方寒风刮来的时候，惊奇的发现，又到年末了，但是回想不起来这一年做了什么，时间过得真的好快！<br>最近在浏览一个社区的时候，偶然发现了一篇文章，讲的是关于如何在移动端页面做调试的，内容中介绍了通过fiddler工具的一个插件来通过日志的方式进行调试，但是总感觉跟我在代码中弹个框这种低端调试方法差不多，所以就没往下实践，有兴趣的同学可以网上搜搜相关方法。做过移动端开发的都可能或多或少面临过如何在移动端调试的问题，目前大多数前端可能我一样，在pc端打开chrome浏览器控制台中的移动模拟选项，然后就开始在上面调试，基本上可以满足大部分正常的移动端网站的开发，但是在目前HybridApp(混合模式移动应用)流行的轻快下，如果还采用之前的方式，显然是不行的，因为这个时候我们需要跟app客户端的同学交流。所以前端小伙伴总是在寻找如何在app上也能像普通网页一样调试，在没找到之前，我用的是alert这种原始方式（想起了年少面试时悲惨的一幕），也确实解决之前遇到的好多问题，但是效率太低了，而且只适合逻辑的调试或者代码错误调试，比如样式之类的，就不用想了（之前样式的都是通过fiddler抓包文件，在本地修改，效率还行）。不过最近发现了一个非常不错的方法，那就是通过chrome remote工具来进行调试，满足了好多我们想要的功能，下面就做个简单介绍。<br><strong>chrome remote</strong>是一个针对<strong>Android</strong>的远程调试工具，他能实现的<strong>部分功能</strong>如下：</p>\n<blockquote>\n<ul>\n<li>调试移动端普通网站页面。</li>\n<li>调试安卓App中的WebView页面</li>\n<li>本地页面和移动设备页面实时同步</li>\n</ul>\n</blockquote>\n<p><a id=\"more\"></a>（<strong>ios</strong>系统上的调试，我目前没有试过，一般如果你有台mac一切都会的变得简单，而且ios系统上bug不是很多，而且都比较容易解决，但是android就不一样了，国内各种杂七杂八的android手机，bug贡献率那是蹭蹭的往上涨。）</p>\n<p><strong>调试环境</strong>如下：</p>\n<blockquote>\n<ul>\n<li>pc上安装一个chrome浏览器（目前随便下一个版本都在50多）</li>\n<li>一台android设备）。</li>\n</ul>\n</blockquote>\n<p><strong>调试对象</strong><br>如果是调试普通移动端网页，则需要在android设备上安装一个chrome浏览器，并且系统是4.0+（4.0+这个只是参考了其他文章这么说，自己没试过4.0-的设备是否可行）。<br>如果是调试app中webview页面，则需要4.4+系统（4.4—没试过），并且需要app在webview初始化的时候增加相应的配置，配置如下：</p>\n<pre><code>if (Build.VERSION.SDK_INT &gt;=Build.VERSION_CODES.KITKAT) {  \n    WebView.setWebContentsDebuggingEnabled(true);  //最好是加上调试控制，例如只在测试版中开启此功能，防止正式版出现安全问题\n}\n</code></pre><p>上面的都准备好了之后就可以开始尝试了。首先将手机连接至pc，pc上最好安装一些什么手机应用管理之类的软件，例如腾讯的安全管家中自带的手机管理（随便什么相关的软件都行，主要是可以避免安装驱动之类的）。首次连接的时候会弹出：<br><img src=\"1.png\" alt=\"\"><br>勾选点确定即可，下次就不会再出现了(由于之前手机已经勾选了一致通过，所以又找了个)。然后，打开<strong>手机设置</strong>，先点击<strong>开发人员选项</strong>，将<strong>usb调试打开</strong>，然后返回上一层，点击<strong>关于手机</strong>，会出现手机的信息，多次点击版本号（有可能是系统版本号，不同手机表现不一致），会开启开发人员调试功能。具体如下图红框中所示：<br><img src=\"2.png\" alt=\"\"><br>手机端以上完成之后，打开pc Chrome浏览器，点击菜单————更多工具———— 检查设备，如图：<br><img src=\"3.png\" alt=\"\"><br>然后惊奇的发现米有检查设备选项，不要慌，此时在地址栏输入: <a href=\"chrome://inspect/#devices\" target=\"_blank\" rel=\"external\">chrome://inspect/#devices</a> ,这样会看到如下图所示：<br><img src=\"4.png\" alt=\"\"><br>如果此时手机设备已和pc链接好之后，会出现设备相关信息以及你目前在手机设备中运行的网页，如图：<br><img src=\"5.png\" alt=\"\"><br>点击inspect按钮，会弹出一个窗口，对应的是此刻在手机上运行的页面，会看到和本地浏览器一样的界面，然后就可以进行调试了。下面一些是我在实际调试中的一些截图，仅做展示。<br><strong>普通网页</strong><br><img src=\"6.png\" alt=\"\"><br><strong>webview页面</strong><br> <img src=\"7.png\" alt=\"\"></p>\n<p> 关于调试方式还有好多，很多厂子都有做各种调试工具，大家可根据个人喜好来选择自己喜欢的一种。另外，本文是一篇工具使用介绍类文章，参考了好多其他精华文章，所以，如有跟某篇文章相似的地方，还请见谅。</p>\n","excerpt":"<blockquote>\n<p>冷风吹过，又是一年末</p>\n</blockquote>\n<p>北方寒风刮来的时候，惊奇的发现，又到年末了，但是回想不起来这一年做了什么，时间过得真的好快！<br>最近在浏览一个社区的时候，偶然发现了一篇文章，讲的是关于如何在移动端页面做调试的，内容中介绍了通过fiddler工具的一个插件来通过日志的方式进行调试，但是总感觉跟我在代码中弹个框这种低端调试方法差不多，所以就没往下实践，有兴趣的同学可以网上搜搜相关方法。做过移动端开发的都可能或多或少面临过如何在移动端调试的问题，目前大多数前端可能我一样，在pc端打开chrome浏览器控制台中的移动模拟选项，然后就开始在上面调试，基本上可以满足大部分正常的移动端网站的开发，但是在目前HybridApp(混合模式移动应用)流行的轻快下，如果还采用之前的方式，显然是不行的，因为这个时候我们需要跟app客户端的同学交流。所以前端小伙伴总是在寻找如何在app上也能像普通网页一样调试，在没找到之前，我用的是alert这种原始方式（想起了年少面试时悲惨的一幕），也确实解决之前遇到的好多问题，但是效率太低了，而且只适合逻辑的调试或者代码错误调试，比如样式之类的，就不用想了（之前样式的都是通过fiddler抓包文件，在本地修改，效率还行）。不过最近发现了一个非常不错的方法，那就是通过chrome remote工具来进行调试，满足了好多我们想要的功能，下面就做个简单介绍。<br><strong>chrome remote</strong>是一个针对<strong>Android</strong>的远程调试工具，他能实现的<strong>部分功能</strong>如下：</p>\n<blockquote>\n<ul>\n<li>调试移动端普通网站页面。</li>\n<li>调试安卓App中的WebView页面</li>\n<li>本地页面和移动设备页面实时同步</li>\n</ul>\n</blockquote>\n<p>","more":"（<strong>ios</strong>系统上的调试，我目前没有试过，一般如果你有台mac一切都会的变得简单，而且ios系统上bug不是很多，而且都比较容易解决，但是android就不一样了，国内各种杂七杂八的android手机，bug贡献率那是蹭蹭的往上涨。）</p>\n<p><strong>调试环境</strong>如下：</p>\n<blockquote>\n<ul>\n<li>pc上安装一个chrome浏览器（目前随便下一个版本都在50多）</li>\n<li>一台android设备）。</li>\n</ul>\n</blockquote>\n<p><strong>调试对象</strong><br>如果是调试普通移动端网页，则需要在android设备上安装一个chrome浏览器，并且系统是4.0+（4.0+这个只是参考了其他文章这么说，自己没试过4.0-的设备是否可行）。<br>如果是调试app中webview页面，则需要4.4+系统（4.4—没试过），并且需要app在webview初始化的时候增加相应的配置，配置如下：</p>\n<pre><code>if (Build.VERSION.SDK_INT &gt;=Build.VERSION_CODES.KITKAT) {  \n    WebView.setWebContentsDebuggingEnabled(true);  //最好是加上调试控制，例如只在测试版中开启此功能，防止正式版出现安全问题\n}\n</code></pre><p>上面的都准备好了之后就可以开始尝试了。首先将手机连接至pc，pc上最好安装一些什么手机应用管理之类的软件，例如腾讯的安全管家中自带的手机管理（随便什么相关的软件都行，主要是可以避免安装驱动之类的）。首次连接的时候会弹出：<br><img src=\"1.png\" alt=\"\"><br>勾选点确定即可，下次就不会再出现了(由于之前手机已经勾选了一致通过，所以又找了个)。然后，打开<strong>手机设置</strong>，先点击<strong>开发人员选项</strong>，将<strong>usb调试打开</strong>，然后返回上一层，点击<strong>关于手机</strong>，会出现手机的信息，多次点击版本号（有可能是系统版本号，不同手机表现不一致），会开启开发人员调试功能。具体如下图红框中所示：<br><img src=\"2.png\" alt=\"\"><br>手机端以上完成之后，打开pc Chrome浏览器，点击菜单————更多工具———— 检查设备，如图：<br><img src=\"3.png\" alt=\"\"><br>然后惊奇的发现米有检查设备选项，不要慌，此时在地址栏输入: <a href=\"chrome://inspect/#devices\">chrome://inspect/#devices</a> ,这样会看到如下图所示：<br><img src=\"4.png\" alt=\"\"><br>如果此时手机设备已和pc链接好之后，会出现设备相关信息以及你目前在手机设备中运行的网页，如图：<br><img src=\"5.png\" alt=\"\"><br>点击inspect按钮，会弹出一个窗口，对应的是此刻在手机上运行的页面，会看到和本地浏览器一样的界面，然后就可以进行调试了。下面一些是我在实际调试中的一些截图，仅做展示。<br><strong>普通网页</strong><br><img src=\"6.png\" alt=\"\"><br><strong>webview页面</strong><br> <img src=\"7.png\" alt=\"\"></p>\n<p> 关于调试方式还有好多，很多厂子都有做各种调试工具，大家可根据个人喜好来选择自己喜欢的一种。另外，本文是一篇工具使用介绍类文章，参考了好多其他精华文章，所以，如有跟某篇文章相似的地方，还请见谅。</p>"},{"title":"跨域之JSONP那些事","date":"2016-10-18T11:55:26.000Z","_content":"\n > 跨域不是你想跨，想跨就能跨\n \n**跨域**一直是个老生常谈的问题，由于受**同源策略**限制，跨域确实是每个前端开发经常会遇到的一个问题。跨域的方式有很多种，但是 个人 认为目前普遍用得最多的还是**JSONP**.对于这种跨域方式，我想变态的人呢都已经深扒了其中的原理，骨头渣都可能研究了一番，并且谨慎的在用着。像我这种长得帅，习惯飘逸走位的人，当然是信手拈来，哪里想用就用哪里，相当滋润。\n   \n**然而**，出来混总是要还的。记得那时青春年少的我做一个功能时，<!--more-->由于我当初是刚来公司，只有一个测试服务器权限，带我的师傅说这个功能的代码就放在我有权限的这台服务器，可是服务端同学给我的接口是另一个服务器上部署的，于是聪明的我一想肯定是跨域了，就潇洒地抄了一段类似下面代码：\n   \n\n     $.ajax({\n        url:\"http://minisky.duapp.com/test/json\",\n        dataType: \"jsonp\",\n        jsonp: \"callback\",\n        success: function(response) {\n            console.log(response.name);\n        }\n    });\n\n看这段代码没啥毛病，挺简约的，本以为数据没问题了，可以做余下的活了，结果跑起来让我看到了最不愿看到的事，\n![logo](jsonp_1.png)\n\n看到这唯美的画面，我立刻慌了，语法错了？哪里少了什么参数？返回的数据需要处理一下？各种猜想在我脑子里像幻灯片一样过着，尝试了各种都无果，几近奔溃（为什么不问同事呢：因为刚来此地，怕生，不敢）。之后就赶紧查资料，了解**jsonp**跨域。当然，上面的出的错误，搜了一下，很快得到了答案，那就是服务端没有提供相应的跨域处理，需要服务端童鞋处理下，很快，服务端童鞋给了一个新接口，类似下面：\n\n    $.ajax({\n        url:\"http://minisky.duapp.com/test/jsonp\",\n        dataType: \"jsonp\",\n        jsonp: \"callback\",\n        success: function(response) {\n            console.log(response.name);\n        }\n    });\n    \n于是得到了下面这样结果，功能终于正常了。\n![logo](jsonp_2.png)\n\n本可以高高兴兴的和小伙伴开心的玩耍了，但是，做为一个有理想的小白，还是决心将之前问题搞得透彻一点。实际上在上面报错的时候，除了报喂捕获的错误之外，老版本浏览器会顺带给一句英文提示（我把浏览器版本升的太高，出不来，就不粘贴了），大致意思是说返回的数据被当做js解释的时候呢发现发现类型不对（原谅我大学应总是不及格），于是就报了那么一段错。看来还是要深扒一下**JSONP**原理才能安心，虽然特别不喜欢这样做，但是，你懂得。\n\n**什么是JSONP？**\n年轻的我起初以为jsonp是ajax，因为我总是看到上面那些$.ajax()代码，当然更年轻的时候我以为ajax只有jquery有，后来才明白压根不是那么回事。jsonp可以说和ajax没啥关系，只不过jquery为了方便，将它同ajax封装在了一个方法中，因此误导了一批又一批少不经事的小白。jsonp有的人说他是一种非正式的传输协议，也有的人说就是一个get请求，感觉都挺对，不过这样说，我感觉如果换做一年前的我，应该还是不理解。浏览器为了安全起见，规定不同源的客户端脚本在没明确授权的情况下，不能读写对方的资源，所以ajax方法没办法请求其他站点的数据（当然，xhr2例外），但是人们发现&lt;script&gt;标签是不受影响的，他可以执行来自不同服务器的代码，于是，服务端通过返回text/javascript类型的数据，使得返回的数据可以被浏览器解释执行。于是我们得到了它的真实面目：\n\n    var script=document.createElement(\"script\");  \n    script.type=\"text/javascript\";  \n    script.src=\"http://minisky.duapp.com/test/jsonp?callback=jsonpCallback\";  \n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n    \n    function jsonpCallback(data){//最终调用执行\n        console.log(JSON.stringify(data));\n    }\n    \n最终，服务端会返回jsonpCallback(data),和上面返回的数据格式一样，然后浏览器将其执行。到这里可能明白了，原来高大上的jsonp就是一个script资源请求。但是在用的时候发现上面的代码不够灵活，jquery提供的感觉灵活简洁多了，所以，我们就将其改造一下，稍微有点函数式编程的意思：\n\n    function jsonp(url,callback){\n        var script=document.createElement(\"script\");\n        script.type=\"text/javascript\";\n        random = parseInt(Math.random() * 1000000000000 + 1000000000000); \n        var funcN =['JSONPCallback', random].join('');\n        window[funcN] = function(data){\n            //产生一个全局变量，在数据请求成功时，会执行这个函数。\n            callback && callback(data);\n        }\n        script.src = url+\"?callback=\"+funcN;\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    }\n    jsonp('http://minisky.duapp.com/test/jsonp',function(data){\n        console.log(JSON.stringify(data));\n    })\n    \n上面的方法似乎已经可以满足大部分需求了，但是依然有一些弊端，例如，无法传递一些额外的参数，或者请求失败处理等。对于和我一样，拿来主义的人来说，上面的就属于歪瓜裂枣，根本不屑一顾。所以我们在对上面的代码进行深加工，再加工之后，就有了下面比较全面的jsonp：\n\n    function jsonp(options){ //jsonp\n\t    // 配置\n\t    var defaults = {\n\t        url: '',            // 请求地址\n\t        params: {},         // 附加参数\n\t        jsonp: 'callback',  // jsonp回调函数，?jsonp=jsonpCallback\n\t        jsonpCallback: '',  // jsonp回调函数，如果此值为空，函数名将会随机生成，?jsonp=jsonpCallback\n\t        version: false,     // 是否需要版本号\n\t        remove: true,       // 加载完成后，是否删除script\n\t        success: null,       // 加载完成\n\t        onerror: null,      // 加载失败\n\t        error: 3            // 加载失败重试次数\n\t    };\n\t    // 内部函数\n\t    var extend = function() {\n\t        var args = Array.prototype.slice.apply(arguments), json = {};\n\t        if (args.length) {\n\t            json = args.shift();\n\t            for (var i = 0, len = args.length; i < len; i ++) for (var id in args[i]) json[id] = args[i][id];\n\t        }\n\t        return json;\n\t    };\n\t    var j2p = function(json) {\n\t        var a = [];\n\t        for (var i in json) a.push(i + '=' + json[i]);\n\t        return a.join('&');\n\t    };\n\n\t    // 合并配置\n\t    var options = extend({}, defaults, options);\n\n\t    // 加载失败函数回调执行\n\t    if (options.error <= 0) {\n\t        options.onerror && options.onerror.constructor == Function && options.onerror();\n\t        return false;\n\t    }\n\n\t    var head = document.getElementsByTagName('head')[0],\n\t        script = document.createElement('script'),\n\t        url = options.url,\n\t        random = parseInt(Math.random() * 1000000000000 + 1000000000000);\n\n\t    // jsonpCallback，若无传值，取随机值\n\t    options.jsonpCallback = options.jsonpCallback || ['JSONPCallback', random].join('');\n\t    options.params[options.jsonp] = options.jsonpCallback;\n\t    \n\t    if (options.version) {\n\t        options.params['_'] = random;\n\t    }\n\t    \n\t    window[options.jsonpCallback] = function() {\n\t        // success事件回调\n\t        options.success && options.success.constructor == Function && options.success.apply(options, arguments);\n\t        // 是否删除当前请求载体\n\t        options.remove && head.removeChild(script);\n\t    };\n\n\t    var params = j2p(options.params);\n\t    if (params) {\n\t        var urls = url.split('?'), s = '';\n\t        if (urls[1] === undefined) s = '?';\n\t        else if (urls[1] !== '') s = '&';\n\t        url = [url, s, params].join('');\n\t    }\n\t    script.src = url;\n\n\t    // 失败重试，次数 -1\n\t    script.onerror = function() {\n\t        options.error -= 1;\n\t    };\n\n\t    // script节点插入文档\n\t    head.appendChild(script);\n\t}\n\t\n\tjsonp({\n        url: 'http://minisky.duapp.com/test/jsonp',\n        params: {},//其他参数，json格式的 \n        success: function(data){\n           console.log(JSON.stringify(data)); \n        }\n        //其他参数可根据需要自己配置\n    })\n\t\n这篇关于jsonp的浅谈差不多就到这了。可能有的人会说，人家jquery，zepto等一些成熟的框架jsonp都已经做得那么好了，弄这个有啥用，确实没啥大用，但是在某些方面还是不错的，例如，你写一个功能简单，需求较少的页面时，本来整个页面可能就不到5k,结果，你需要一个跨域请求数据，这时候，其实不太建议用这些个框架，自己能写，就随手写几行代码，页面性能和加载速度都会有很大提高。好了，最后补几句，由于本人也是小白一枚，所说的都是自己的理解，和正确的解释讲解都会差那么一大截，还请见谅。如果说的有什么错误或者有什么技术上的想法可以留言。","source":"_posts/跨域之JSONP那些事.md","raw":"---\ntitle: 跨域之JSONP那些事\ndate: 2016-10-18 19:55:26\ntags: javascript\ncategories: 技术\n---\n\n > 跨域不是你想跨，想跨就能跨\n \n**跨域**一直是个老生常谈的问题，由于受**同源策略**限制，跨域确实是每个前端开发经常会遇到的一个问题。跨域的方式有很多种，但是 个人 认为目前普遍用得最多的还是**JSONP**.对于这种跨域方式，我想变态的人呢都已经深扒了其中的原理，骨头渣都可能研究了一番，并且谨慎的在用着。像我这种长得帅，习惯飘逸走位的人，当然是信手拈来，哪里想用就用哪里，相当滋润。\n   \n**然而**，出来混总是要还的。记得那时青春年少的我做一个功能时，<!--more-->由于我当初是刚来公司，只有一个测试服务器权限，带我的师傅说这个功能的代码就放在我有权限的这台服务器，可是服务端同学给我的接口是另一个服务器上部署的，于是聪明的我一想肯定是跨域了，就潇洒地抄了一段类似下面代码：\n   \n\n     $.ajax({\n        url:\"http://minisky.duapp.com/test/json\",\n        dataType: \"jsonp\",\n        jsonp: \"callback\",\n        success: function(response) {\n            console.log(response.name);\n        }\n    });\n\n看这段代码没啥毛病，挺简约的，本以为数据没问题了，可以做余下的活了，结果跑起来让我看到了最不愿看到的事，\n![logo](jsonp_1.png)\n\n看到这唯美的画面，我立刻慌了，语法错了？哪里少了什么参数？返回的数据需要处理一下？各种猜想在我脑子里像幻灯片一样过着，尝试了各种都无果，几近奔溃（为什么不问同事呢：因为刚来此地，怕生，不敢）。之后就赶紧查资料，了解**jsonp**跨域。当然，上面的出的错误，搜了一下，很快得到了答案，那就是服务端没有提供相应的跨域处理，需要服务端童鞋处理下，很快，服务端童鞋给了一个新接口，类似下面：\n\n    $.ajax({\n        url:\"http://minisky.duapp.com/test/jsonp\",\n        dataType: \"jsonp\",\n        jsonp: \"callback\",\n        success: function(response) {\n            console.log(response.name);\n        }\n    });\n    \n于是得到了下面这样结果，功能终于正常了。\n![logo](jsonp_2.png)\n\n本可以高高兴兴的和小伙伴开心的玩耍了，但是，做为一个有理想的小白，还是决心将之前问题搞得透彻一点。实际上在上面报错的时候，除了报喂捕获的错误之外，老版本浏览器会顺带给一句英文提示（我把浏览器版本升的太高，出不来，就不粘贴了），大致意思是说返回的数据被当做js解释的时候呢发现发现类型不对（原谅我大学应总是不及格），于是就报了那么一段错。看来还是要深扒一下**JSONP**原理才能安心，虽然特别不喜欢这样做，但是，你懂得。\n\n**什么是JSONP？**\n年轻的我起初以为jsonp是ajax，因为我总是看到上面那些$.ajax()代码，当然更年轻的时候我以为ajax只有jquery有，后来才明白压根不是那么回事。jsonp可以说和ajax没啥关系，只不过jquery为了方便，将它同ajax封装在了一个方法中，因此误导了一批又一批少不经事的小白。jsonp有的人说他是一种非正式的传输协议，也有的人说就是一个get请求，感觉都挺对，不过这样说，我感觉如果换做一年前的我，应该还是不理解。浏览器为了安全起见，规定不同源的客户端脚本在没明确授权的情况下，不能读写对方的资源，所以ajax方法没办法请求其他站点的数据（当然，xhr2例外），但是人们发现&lt;script&gt;标签是不受影响的，他可以执行来自不同服务器的代码，于是，服务端通过返回text/javascript类型的数据，使得返回的数据可以被浏览器解释执行。于是我们得到了它的真实面目：\n\n    var script=document.createElement(\"script\");  \n    script.type=\"text/javascript\";  \n    script.src=\"http://minisky.duapp.com/test/jsonp?callback=jsonpCallback\";  \n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n    \n    function jsonpCallback(data){//最终调用执行\n        console.log(JSON.stringify(data));\n    }\n    \n最终，服务端会返回jsonpCallback(data),和上面返回的数据格式一样，然后浏览器将其执行。到这里可能明白了，原来高大上的jsonp就是一个script资源请求。但是在用的时候发现上面的代码不够灵活，jquery提供的感觉灵活简洁多了，所以，我们就将其改造一下，稍微有点函数式编程的意思：\n\n    function jsonp(url,callback){\n        var script=document.createElement(\"script\");\n        script.type=\"text/javascript\";\n        random = parseInt(Math.random() * 1000000000000 + 1000000000000); \n        var funcN =['JSONPCallback', random].join('');\n        window[funcN] = function(data){\n            //产生一个全局变量，在数据请求成功时，会执行这个函数。\n            callback && callback(data);\n        }\n        script.src = url+\"?callback=\"+funcN;\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    }\n    jsonp('http://minisky.duapp.com/test/jsonp',function(data){\n        console.log(JSON.stringify(data));\n    })\n    \n上面的方法似乎已经可以满足大部分需求了，但是依然有一些弊端，例如，无法传递一些额外的参数，或者请求失败处理等。对于和我一样，拿来主义的人来说，上面的就属于歪瓜裂枣，根本不屑一顾。所以我们在对上面的代码进行深加工，再加工之后，就有了下面比较全面的jsonp：\n\n    function jsonp(options){ //jsonp\n\t    // 配置\n\t    var defaults = {\n\t        url: '',            // 请求地址\n\t        params: {},         // 附加参数\n\t        jsonp: 'callback',  // jsonp回调函数，?jsonp=jsonpCallback\n\t        jsonpCallback: '',  // jsonp回调函数，如果此值为空，函数名将会随机生成，?jsonp=jsonpCallback\n\t        version: false,     // 是否需要版本号\n\t        remove: true,       // 加载完成后，是否删除script\n\t        success: null,       // 加载完成\n\t        onerror: null,      // 加载失败\n\t        error: 3            // 加载失败重试次数\n\t    };\n\t    // 内部函数\n\t    var extend = function() {\n\t        var args = Array.prototype.slice.apply(arguments), json = {};\n\t        if (args.length) {\n\t            json = args.shift();\n\t            for (var i = 0, len = args.length; i < len; i ++) for (var id in args[i]) json[id] = args[i][id];\n\t        }\n\t        return json;\n\t    };\n\t    var j2p = function(json) {\n\t        var a = [];\n\t        for (var i in json) a.push(i + '=' + json[i]);\n\t        return a.join('&');\n\t    };\n\n\t    // 合并配置\n\t    var options = extend({}, defaults, options);\n\n\t    // 加载失败函数回调执行\n\t    if (options.error <= 0) {\n\t        options.onerror && options.onerror.constructor == Function && options.onerror();\n\t        return false;\n\t    }\n\n\t    var head = document.getElementsByTagName('head')[0],\n\t        script = document.createElement('script'),\n\t        url = options.url,\n\t        random = parseInt(Math.random() * 1000000000000 + 1000000000000);\n\n\t    // jsonpCallback，若无传值，取随机值\n\t    options.jsonpCallback = options.jsonpCallback || ['JSONPCallback', random].join('');\n\t    options.params[options.jsonp] = options.jsonpCallback;\n\t    \n\t    if (options.version) {\n\t        options.params['_'] = random;\n\t    }\n\t    \n\t    window[options.jsonpCallback] = function() {\n\t        // success事件回调\n\t        options.success && options.success.constructor == Function && options.success.apply(options, arguments);\n\t        // 是否删除当前请求载体\n\t        options.remove && head.removeChild(script);\n\t    };\n\n\t    var params = j2p(options.params);\n\t    if (params) {\n\t        var urls = url.split('?'), s = '';\n\t        if (urls[1] === undefined) s = '?';\n\t        else if (urls[1] !== '') s = '&';\n\t        url = [url, s, params].join('');\n\t    }\n\t    script.src = url;\n\n\t    // 失败重试，次数 -1\n\t    script.onerror = function() {\n\t        options.error -= 1;\n\t    };\n\n\t    // script节点插入文档\n\t    head.appendChild(script);\n\t}\n\t\n\tjsonp({\n        url: 'http://minisky.duapp.com/test/jsonp',\n        params: {},//其他参数，json格式的 \n        success: function(data){\n           console.log(JSON.stringify(data)); \n        }\n        //其他参数可根据需要自己配置\n    })\n\t\n这篇关于jsonp的浅谈差不多就到这了。可能有的人会说，人家jquery，zepto等一些成熟的框架jsonp都已经做得那么好了，弄这个有啥用，确实没啥大用，但是在某些方面还是不错的，例如，你写一个功能简单，需求较少的页面时，本来整个页面可能就不到5k,结果，你需要一个跨域请求数据，这时候，其实不太建议用这些个框架，自己能写，就随手写几行代码，页面性能和加载速度都会有很大提高。好了，最后补几句，由于本人也是小白一枚，所说的都是自己的理解，和正确的解释讲解都会差那么一大截，还请见谅。如果说的有什么错误或者有什么技术上的想法可以留言。","slug":"跨域之JSONP那些事","published":1,"updated":"2016-10-20T12:53:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwljsuwr000n325v28zxscg3","content":"<blockquote>\n<p>跨域不是你想跨，想跨就能跨</p>\n</blockquote>\n<p><strong>跨域</strong>一直是个老生常谈的问题，由于受<strong>同源策略</strong>限制，跨域确实是每个前端开发经常会遇到的一个问题。跨域的方式有很多种，但是 个人 认为目前普遍用得最多的还是<strong>JSONP</strong>.对于这种跨域方式，我想变态的人呢都已经深扒了其中的原理，骨头渣都可能研究了一番，并且谨慎的在用着。像我这种长得帅，习惯飘逸走位的人，当然是信手拈来，哪里想用就用哪里，相当滋润。</p>\n<p><strong>然而</strong>，出来混总是要还的。记得那时青春年少的我做一个功能时，<a id=\"more\"></a>由于我当初是刚来公司，只有一个测试服务器权限，带我的师傅说这个功能的代码就放在我有权限的这台服务器，可是服务端同学给我的接口是另一个服务器上部署的，于是聪明的我一想肯定是跨域了，就潇洒地抄了一段类似下面代码：</p>\n<pre><code> $.ajax({\n    url:&quot;http://minisky.duapp.com/test/json&quot;,\n    dataType: &quot;jsonp&quot;,\n    jsonp: &quot;callback&quot;,\n    success: function(response) {\n        console.log(response.name);\n    }\n});\n</code></pre><p>看这段代码没啥毛病，挺简约的，本以为数据没问题了，可以做余下的活了，结果跑起来让我看到了最不愿看到的事，<br><img src=\"jsonp_1.png\" alt=\"logo\"></p>\n<p>看到这唯美的画面，我立刻慌了，语法错了？哪里少了什么参数？返回的数据需要处理一下？各种猜想在我脑子里像幻灯片一样过着，尝试了各种都无果，几近奔溃（为什么不问同事呢：因为刚来此地，怕生，不敢）。之后就赶紧查资料，了解<strong>jsonp</strong>跨域。当然，上面的出的错误，搜了一下，很快得到了答案，那就是服务端没有提供相应的跨域处理，需要服务端童鞋处理下，很快，服务端童鞋给了一个新接口，类似下面：</p>\n<pre><code>$.ajax({\n    url:&quot;http://minisky.duapp.com/test/jsonp&quot;,\n    dataType: &quot;jsonp&quot;,\n    jsonp: &quot;callback&quot;,\n    success: function(response) {\n        console.log(response.name);\n    }\n});\n</code></pre><p>于是得到了下面这样结果，功能终于正常了。<br><img src=\"jsonp_2.png\" alt=\"logo\"></p>\n<p>本可以高高兴兴的和小伙伴开心的玩耍了，但是，做为一个有理想的小白，还是决心将之前问题搞得透彻一点。实际上在上面报错的时候，除了报喂捕获的错误之外，老版本浏览器会顺带给一句英文提示（我把浏览器版本升的太高，出不来，就不粘贴了），大致意思是说返回的数据被当做js解释的时候呢发现发现类型不对（原谅我大学应总是不及格），于是就报了那么一段错。看来还是要深扒一下<strong>JSONP</strong>原理才能安心，虽然特别不喜欢这样做，但是，你懂得。</p>\n<p><strong>什么是JSONP？</strong><br>年轻的我起初以为jsonp是ajax，因为我总是看到上面那些$.ajax()代码，当然更年轻的时候我以为ajax只有jquery有，后来才明白压根不是那么回事。jsonp可以说和ajax没啥关系，只不过jquery为了方便，将它同ajax封装在了一个方法中，因此误导了一批又一批少不经事的小白。jsonp有的人说他是一种非正式的传输协议，也有的人说就是一个get请求，感觉都挺对，不过这样说，我感觉如果换做一年前的我，应该还是不理解。浏览器为了安全起见，规定不同源的客户端脚本在没明确授权的情况下，不能读写对方的资源，所以ajax方法没办法请求其他站点的数据（当然，xhr2例外），但是人们发现&lt;script&gt;标签是不受影响的，他可以执行来自不同服务器的代码，于是，服务端通过返回text/javascript类型的数据，使得返回的数据可以被浏览器解释执行。于是我们得到了它的真实面目：</p>\n<pre><code>var script=document.createElement(&quot;script&quot;);  \nscript.type=&quot;text/javascript&quot;;  \nscript.src=&quot;http://minisky.duapp.com/test/jsonp?callback=jsonpCallback&quot;;  \ndocument.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);\n\nfunction jsonpCallback(data){//最终调用执行\n    console.log(JSON.stringify(data));\n}\n</code></pre><p>最终，服务端会返回jsonpCallback(data),和上面返回的数据格式一样，然后浏览器将其执行。到这里可能明白了，原来高大上的jsonp就是一个script资源请求。但是在用的时候发现上面的代码不够灵活，jquery提供的感觉灵活简洁多了，所以，我们就将其改造一下，稍微有点函数式编程的意思：</p>\n<pre><code>function jsonp(url,callback){\n    var script=document.createElement(&quot;script&quot;);\n    script.type=&quot;text/javascript&quot;;\n    random = parseInt(Math.random() * 1000000000000 + 1000000000000); \n    var funcN =[&apos;JSONPCallback&apos;, random].join(&apos;&apos;);\n    window[funcN] = function(data){\n        //产生一个全局变量，在数据请求成功时，会执行这个函数。\n        callback &amp;&amp; callback(data);\n    }\n    script.src = url+&quot;?callback=&quot;+funcN;\n    document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);\n}\njsonp(&apos;http://minisky.duapp.com/test/jsonp&apos;,function(data){\n    console.log(JSON.stringify(data));\n})\n</code></pre><p>上面的方法似乎已经可以满足大部分需求了，但是依然有一些弊端，例如，无法传递一些额外的参数，或者请求失败处理等。对于和我一样，拿来主义的人来说，上面的就属于歪瓜裂枣，根本不屑一顾。所以我们在对上面的代码进行深加工，再加工之后，就有了下面比较全面的jsonp：</p>\n<pre><code>function jsonp(options){ //jsonp\n    // 配置\n    var defaults = {\n        url: &apos;&apos;,            // 请求地址\n        params: {},         // 附加参数\n        jsonp: &apos;callback&apos;,  // jsonp回调函数，?jsonp=jsonpCallback\n        jsonpCallback: &apos;&apos;,  // jsonp回调函数，如果此值为空，函数名将会随机生成，?jsonp=jsonpCallback\n        version: false,     // 是否需要版本号\n        remove: true,       // 加载完成后，是否删除script\n        success: null,       // 加载完成\n        onerror: null,      // 加载失败\n        error: 3            // 加载失败重试次数\n    };\n    // 内部函数\n    var extend = function() {\n        var args = Array.prototype.slice.apply(arguments), json = {};\n        if (args.length) {\n            json = args.shift();\n            for (var i = 0, len = args.length; i &lt; len; i ++) for (var id in args[i]) json[id] = args[i][id];\n        }\n        return json;\n    };\n    var j2p = function(json) {\n        var a = [];\n        for (var i in json) a.push(i + &apos;=&apos; + json[i]);\n        return a.join(&apos;&amp;&apos;);\n    };\n\n    // 合并配置\n    var options = extend({}, defaults, options);\n\n    // 加载失败函数回调执行\n    if (options.error &lt;= 0) {\n        options.onerror &amp;&amp; options.onerror.constructor == Function &amp;&amp; options.onerror();\n        return false;\n    }\n\n    var head = document.getElementsByTagName(&apos;head&apos;)[0],\n        script = document.createElement(&apos;script&apos;),\n        url = options.url,\n        random = parseInt(Math.random() * 1000000000000 + 1000000000000);\n\n    // jsonpCallback，若无传值，取随机值\n    options.jsonpCallback = options.jsonpCallback || [&apos;JSONPCallback&apos;, random].join(&apos;&apos;);\n    options.params[options.jsonp] = options.jsonpCallback;\n\n    if (options.version) {\n        options.params[&apos;_&apos;] = random;\n    }\n\n    window[options.jsonpCallback] = function() {\n        // success事件回调\n        options.success &amp;&amp; options.success.constructor == Function &amp;&amp; options.success.apply(options, arguments);\n        // 是否删除当前请求载体\n        options.remove &amp;&amp; head.removeChild(script);\n    };\n\n    var params = j2p(options.params);\n    if (params) {\n        var urls = url.split(&apos;?&apos;), s = &apos;&apos;;\n        if (urls[1] === undefined) s = &apos;?&apos;;\n        else if (urls[1] !== &apos;&apos;) s = &apos;&amp;&apos;;\n        url = [url, s, params].join(&apos;&apos;);\n    }\n    script.src = url;\n\n    // 失败重试，次数 -1\n    script.onerror = function() {\n        options.error -= 1;\n    };\n\n    // script节点插入文档\n    head.appendChild(script);\n}\n\njsonp({\n    url: &apos;http://minisky.duapp.com/test/jsonp&apos;,\n    params: {},//其他参数，json格式的 \n    success: function(data){\n       console.log(JSON.stringify(data)); \n    }\n    //其他参数可根据需要自己配置\n})\n</code></pre><p>这篇关于jsonp的浅谈差不多就到这了。可能有的人会说，人家jquery，zepto等一些成熟的框架jsonp都已经做得那么好了，弄这个有啥用，确实没啥大用，但是在某些方面还是不错的，例如，你写一个功能简单，需求较少的页面时，本来整个页面可能就不到5k,结果，你需要一个跨域请求数据，这时候，其实不太建议用这些个框架，自己能写，就随手写几行代码，页面性能和加载速度都会有很大提高。好了，最后补几句，由于本人也是小白一枚，所说的都是自己的理解，和正确的解释讲解都会差那么一大截，还请见谅。如果说的有什么错误或者有什么技术上的想法可以留言。</p>\n","excerpt":"<blockquote>\n<p>跨域不是你想跨，想跨就能跨</p>\n</blockquote>\n<p><strong>跨域</strong>一直是个老生常谈的问题，由于受<strong>同源策略</strong>限制，跨域确实是每个前端开发经常会遇到的一个问题。跨域的方式有很多种，但是 个人 认为目前普遍用得最多的还是<strong>JSONP</strong>.对于这种跨域方式，我想变态的人呢都已经深扒了其中的原理，骨头渣都可能研究了一番，并且谨慎的在用着。像我这种长得帅，习惯飘逸走位的人，当然是信手拈来，哪里想用就用哪里，相当滋润。</p>\n<p><strong>然而</strong>，出来混总是要还的。记得那时青春年少的我做一个功能时，","more":"由于我当初是刚来公司，只有一个测试服务器权限，带我的师傅说这个功能的代码就放在我有权限的这台服务器，可是服务端同学给我的接口是另一个服务器上部署的，于是聪明的我一想肯定是跨域了，就潇洒地抄了一段类似下面代码：</p>\n<pre><code> $.ajax({\n    url:&quot;http://minisky.duapp.com/test/json&quot;,\n    dataType: &quot;jsonp&quot;,\n    jsonp: &quot;callback&quot;,\n    success: function(response) {\n        console.log(response.name);\n    }\n});\n</code></pre><p>看这段代码没啥毛病，挺简约的，本以为数据没问题了，可以做余下的活了，结果跑起来让我看到了最不愿看到的事，<br><img src=\"jsonp_1.png\" alt=\"logo\"></p>\n<p>看到这唯美的画面，我立刻慌了，语法错了？哪里少了什么参数？返回的数据需要处理一下？各种猜想在我脑子里像幻灯片一样过着，尝试了各种都无果，几近奔溃（为什么不问同事呢：因为刚来此地，怕生，不敢）。之后就赶紧查资料，了解<strong>jsonp</strong>跨域。当然，上面的出的错误，搜了一下，很快得到了答案，那就是服务端没有提供相应的跨域处理，需要服务端童鞋处理下，很快，服务端童鞋给了一个新接口，类似下面：</p>\n<pre><code>$.ajax({\n    url:&quot;http://minisky.duapp.com/test/jsonp&quot;,\n    dataType: &quot;jsonp&quot;,\n    jsonp: &quot;callback&quot;,\n    success: function(response) {\n        console.log(response.name);\n    }\n});\n</code></pre><p>于是得到了下面这样结果，功能终于正常了。<br><img src=\"jsonp_2.png\" alt=\"logo\"></p>\n<p>本可以高高兴兴的和小伙伴开心的玩耍了，但是，做为一个有理想的小白，还是决心将之前问题搞得透彻一点。实际上在上面报错的时候，除了报喂捕获的错误之外，老版本浏览器会顺带给一句英文提示（我把浏览器版本升的太高，出不来，就不粘贴了），大致意思是说返回的数据被当做js解释的时候呢发现发现类型不对（原谅我大学应总是不及格），于是就报了那么一段错。看来还是要深扒一下<strong>JSONP</strong>原理才能安心，虽然特别不喜欢这样做，但是，你懂得。</p>\n<p><strong>什么是JSONP？</strong><br>年轻的我起初以为jsonp是ajax，因为我总是看到上面那些$.ajax()代码，当然更年轻的时候我以为ajax只有jquery有，后来才明白压根不是那么回事。jsonp可以说和ajax没啥关系，只不过jquery为了方便，将它同ajax封装在了一个方法中，因此误导了一批又一批少不经事的小白。jsonp有的人说他是一种非正式的传输协议，也有的人说就是一个get请求，感觉都挺对，不过这样说，我感觉如果换做一年前的我，应该还是不理解。浏览器为了安全起见，规定不同源的客户端脚本在没明确授权的情况下，不能读写对方的资源，所以ajax方法没办法请求其他站点的数据（当然，xhr2例外），但是人们发现&lt;script&gt;标签是不受影响的，他可以执行来自不同服务器的代码，于是，服务端通过返回text/javascript类型的数据，使得返回的数据可以被浏览器解释执行。于是我们得到了它的真实面目：</p>\n<pre><code>var script=document.createElement(&quot;script&quot;);  \nscript.type=&quot;text/javascript&quot;;  \nscript.src=&quot;http://minisky.duapp.com/test/jsonp?callback=jsonpCallback&quot;;  \ndocument.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);\n\nfunction jsonpCallback(data){//最终调用执行\n    console.log(JSON.stringify(data));\n}\n</code></pre><p>最终，服务端会返回jsonpCallback(data),和上面返回的数据格式一样，然后浏览器将其执行。到这里可能明白了，原来高大上的jsonp就是一个script资源请求。但是在用的时候发现上面的代码不够灵活，jquery提供的感觉灵活简洁多了，所以，我们就将其改造一下，稍微有点函数式编程的意思：</p>\n<pre><code>function jsonp(url,callback){\n    var script=document.createElement(&quot;script&quot;);\n    script.type=&quot;text/javascript&quot;;\n    random = parseInt(Math.random() * 1000000000000 + 1000000000000); \n    var funcN =[&apos;JSONPCallback&apos;, random].join(&apos;&apos;);\n    window[funcN] = function(data){\n        //产生一个全局变量，在数据请求成功时，会执行这个函数。\n        callback &amp;&amp; callback(data);\n    }\n    script.src = url+&quot;?callback=&quot;+funcN;\n    document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);\n}\njsonp(&apos;http://minisky.duapp.com/test/jsonp&apos;,function(data){\n    console.log(JSON.stringify(data));\n})\n</code></pre><p>上面的方法似乎已经可以满足大部分需求了，但是依然有一些弊端，例如，无法传递一些额外的参数，或者请求失败处理等。对于和我一样，拿来主义的人来说，上面的就属于歪瓜裂枣，根本不屑一顾。所以我们在对上面的代码进行深加工，再加工之后，就有了下面比较全面的jsonp：</p>\n<pre><code>function jsonp(options){ //jsonp\n    // 配置\n    var defaults = {\n        url: &apos;&apos;,            // 请求地址\n        params: {},         // 附加参数\n        jsonp: &apos;callback&apos;,  // jsonp回调函数，?jsonp=jsonpCallback\n        jsonpCallback: &apos;&apos;,  // jsonp回调函数，如果此值为空，函数名将会随机生成，?jsonp=jsonpCallback\n        version: false,     // 是否需要版本号\n        remove: true,       // 加载完成后，是否删除script\n        success: null,       // 加载完成\n        onerror: null,      // 加载失败\n        error: 3            // 加载失败重试次数\n    };\n    // 内部函数\n    var extend = function() {\n        var args = Array.prototype.slice.apply(arguments), json = {};\n        if (args.length) {\n            json = args.shift();\n            for (var i = 0, len = args.length; i &lt; len; i ++) for (var id in args[i]) json[id] = args[i][id];\n        }\n        return json;\n    };\n    var j2p = function(json) {\n        var a = [];\n        for (var i in json) a.push(i + &apos;=&apos; + json[i]);\n        return a.join(&apos;&amp;&apos;);\n    };\n\n    // 合并配置\n    var options = extend({}, defaults, options);\n\n    // 加载失败函数回调执行\n    if (options.error &lt;= 0) {\n        options.onerror &amp;&amp; options.onerror.constructor == Function &amp;&amp; options.onerror();\n        return false;\n    }\n\n    var head = document.getElementsByTagName(&apos;head&apos;)[0],\n        script = document.createElement(&apos;script&apos;),\n        url = options.url,\n        random = parseInt(Math.random() * 1000000000000 + 1000000000000);\n\n    // jsonpCallback，若无传值，取随机值\n    options.jsonpCallback = options.jsonpCallback || [&apos;JSONPCallback&apos;, random].join(&apos;&apos;);\n    options.params[options.jsonp] = options.jsonpCallback;\n\n    if (options.version) {\n        options.params[&apos;_&apos;] = random;\n    }\n\n    window[options.jsonpCallback] = function() {\n        // success事件回调\n        options.success &amp;&amp; options.success.constructor == Function &amp;&amp; options.success.apply(options, arguments);\n        // 是否删除当前请求载体\n        options.remove &amp;&amp; head.removeChild(script);\n    };\n\n    var params = j2p(options.params);\n    if (params) {\n        var urls = url.split(&apos;?&apos;), s = &apos;&apos;;\n        if (urls[1] === undefined) s = &apos;?&apos;;\n        else if (urls[1] !== &apos;&apos;) s = &apos;&amp;&apos;;\n        url = [url, s, params].join(&apos;&apos;);\n    }\n    script.src = url;\n\n    // 失败重试，次数 -1\n    script.onerror = function() {\n        options.error -= 1;\n    };\n\n    // script节点插入文档\n    head.appendChild(script);\n}\n\njsonp({\n    url: &apos;http://minisky.duapp.com/test/jsonp&apos;,\n    params: {},//其他参数，json格式的 \n    success: function(data){\n       console.log(JSON.stringify(data)); \n    }\n    //其他参数可根据需要自己配置\n})\n</code></pre><p>这篇关于jsonp的浅谈差不多就到这了。可能有的人会说，人家jquery，zepto等一些成熟的框架jsonp都已经做得那么好了，弄这个有啥用，确实没啥大用，但是在某些方面还是不错的，例如，你写一个功能简单，需求较少的页面时，本来整个页面可能就不到5k,结果，你需要一个跨域请求数据，这时候，其实不太建议用这些个框架，自己能写，就随手写几行代码，页面性能和加载速度都会有很大提高。好了，最后补几句，由于本人也是小白一枚，所说的都是自己的理解，和正确的解释讲解都会差那么一大截，还请见谅。如果说的有什么错误或者有什么技术上的想法可以留言。</p>"}],"PostAsset":[{"_id":"source/_posts/h5本地图片预览简述/1.png","slug":"1.png","post":"ciwljsuwa0008325v4mrt5ogv","modified":0,"renderable":0},{"_id":"source/_posts/css样式操作之document-styleSheets/1.png","slug":"1.png","post":"ciwljsuw80007325vvfpdrdq4","modified":0,"renderable":0},{"_id":"source/_posts/css样式操作之document-styleSheets/2.png","slug":"2.png","post":"ciwljsuw80007325vvfpdrdq4","modified":0,"renderable":0},{"_id":"source/_posts/跨域之JSONP那些事/jsonp_1.png","slug":"jsonp_1.png","post":"ciwljsuwr000n325v28zxscg3","modified":0,"renderable":0},{"_id":"source/_posts/跨域之JSONP那些事/jsonp_2.png","slug":"jsonp_2.png","post":"ciwljsuwr000n325v28zxscg3","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/1.png","slug":"1.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/2.png","slug":"2.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/3.png","slug":"3.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/4.png","slug":"4.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/5.png","slug":"5.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/6.png","slug":"6.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0},{"_id":"source/_posts/移动端网页调试之chrome-remote/7.png","slug":"7.png","post":"ciwljsuwo000k325vlemdjdfu","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ciwljsuw80007325vvfpdrdq4","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwh000d325v52nmhoqg"},{"post_id":"ciwljsuvk0000325vgf55ze8q","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwn000i325vzkyfzpv7"},{"post_id":"ciwljsuwa0008325v4mrt5ogv","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwq000l325vvzhwufnl"},{"post_id":"ciwljsuwf000c325vzx1ighrs","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwt000q325vq475twsg"},{"post_id":"ciwljsuvw0002325vltur2fec","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwv000s325v35ou2lbm"},{"post_id":"ciwljsuw60006325va0roqlds","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwy000w325v0cnsxrck"},{"post_id":"ciwljsuwr000n325v28zxscg3","category_id":"ciwljsuw00004325vu8f1bla5","_id":"ciwljsuwz000y325vff0v3egr"},{"post_id":"ciwljsuwj000f325venmsxn82","category_id":"ciwljsuws000o325vwy5hixkz","_id":"ciwljsuwz0010325vfudaeiwf"},{"post_id":"ciwljsuwo000k325vlemdjdfu","category_id":"ciwljsuww000u325vg8soykqe","_id":"ciwljsux00012325v9ovvaizr"}],"PostTag":[{"post_id":"ciwljsuw80007325vvfpdrdq4","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwe000b325vc9xd8yt6"},{"post_id":"ciwljsuvk0000325vgf55ze8q","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwh000e325vqg5fhvna"},{"post_id":"ciwljsuwa0008325v4mrt5ogv","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwo000j325vp0rsqsqz"},{"post_id":"ciwljsuwf000c325vzx1ighrs","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwq000m325v9ddno84r"},{"post_id":"ciwljsuvw0002325vltur2fec","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwu000r325vu81d1sh6"},{"post_id":"ciwljsuw60006325va0roqlds","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwv000t325vk6s93kh2"},{"post_id":"ciwljsuwr000n325v28zxscg3","tag_id":"ciwljsuw50005325vmndfulsp","_id":"ciwljsuwy000x325vjl0ppfwz"},{"post_id":"ciwljsuwj000f325venmsxn82","tag_id":"ciwljsuws000p325vyu2v5jxm","_id":"ciwljsuwz000z325v1swttyaf"},{"post_id":"ciwljsuwo000k325vlemdjdfu","tag_id":"ciwljsuwx000v325v0r7ctihd","_id":"ciwljsuwz0011325v4k3tltey"}],"Tag":[{"name":"javascript","_id":"ciwljsuw50005325vmndfulsp"},{"name":"生活","_id":"ciwljsuws000p325vyu2v5jxm"},{"name":"tool","_id":"ciwljsuwx000v325v0r7ctihd"}]}}